#!/usr/bin/env perl
### msi_sensor.pl ##################################################################################
use AutoLoader 'AUTOLOAD';
use strict;
use warnings;
use version;
use Carp;
use Getopt::Std;
use Getopt::Long;
use POSIX qw(strftime);
use File::Basename;
use File::Path qw(make_path);
use YAML qw(LoadFile);
use List::Util qw(any);
use IO::Handle;

my $cwd = dirname(__FILE__);
require "$cwd/utilities.pl";

our ($reference, $use_new_msi_sensor_version);

####################################################################################################
# version	author		comment
# 1.0		sprokopec	script to collect MSI metrics

### USAGE ##########################################################################################
# msi_sensor.pl -t tool.yaml -d data.yaml -o /path/to/output/dir -c slurm --remove --dry_run
#
# where:
# 	-t (tool.yaml) contains tool versions and parameters, reference information, etc.
# 	-d (data.yaml) contains sample information (YAML file containing paths to BWA-aligned,
# 	GATK-processed BAMs, generated by gatk.pl)
# 	-o (/path/to/output/dir) indicates tool-specific output directory
# 	-c indicates hpc driver (ie, slurm)
# 	--remove indicates that intermediates will be removed
# 	--dry_run indicates that this is a dry run

### DEFINE SUBROUTINES #############################################################################
# format command to find and format MSI intervals from reference.fa
sub get_format_intervals_command {
	my %args = (
		reference	=> undef,
		output		=> undef,
		@_
		);

	my $format_command = join(' ',
		'msisensor-pro scan',
		'-d', $args{reference},
		'-o', $args{output}
		);

	return($format_command);
	}

# format command to produce panel of normals (for distribution stats, etc)
sub get_baseline_command {
	my %args = (
		input_list	=> undef,
		output_dir	=> undef,
		intervals	=> undef,
		seq_type	=> undef,
		@_
		);

	my $msi_command = join(' ',
		'msisensor-pro baseline',
		'-d', $args{intervals},
		'-i', $args{input_list},
		'-o', $args{output_dir}
		);

	if ('exome' eq $args{seq_type}) {
		$msi_command .= ' -c 20';
		} elsif ('wgs' eq $args{seq_type}) {
		$msi_command .= ' -c 15';
		}

	# output file = reference_baseline.list in output_dir

	return($msi_command);
	}

# format command for MSI-Sensor
sub get_msi_sensor_command {
	my %args = (
		tumour		=> undef,
		normal		=> undef,
		output_stem	=> undef,
		ref_input	=> undef,
		intervals	=> undef,
		seq_type	=> undef,
		@_
		);

	my $msi_command = 'msisensor-pro pro';

	if (defined($args{normal})) {
		$msi_command = join(' ',
			'msisensor-pro msi',
			'-n', $args{normal}
			);
		}

	$msi_command .= ' ' . join(' ',
		'-d', $args{ref_input},
		'-t', $args{tumour},
		'-o', $args{output_stem}
		);

	if ($use_new_msi_sensor_version & (defined($args{intervals}))) {
		$msi_command .= " -e $args{intervals}";
		}

	if ('exome' eq $args{seq_type}) {
		$msi_command .= ' -c 20';
		} elsif ('wgs' eq $args{seq_type}) {
		$msi_command .= ' -c 15';
		}

	$msi_command .= "\n\necho 'MSI-Sensor completed successfully.' > $args{output_stem}.COMPLETE";
	
	return($msi_command);
	}

### MAIN ###########################################################################################
sub main {
	my %args = (
		tool_config		=> undef,
		data_config		=> undef,
		output_directory	=> undef,
		hpc_driver		=> undef,
		del_intermediates	=> undef,
		dry_run			=> undef,
		no_wait			=> undef,
		@_
		);

	my $tool_config = $args{tool_config};
	my $data_config = $args{data_config};

	### PREAMBLE ######################################################################################
	unless($args{dry_run}) {
		print "Initiating MSI-Sensor pipeline...\n";
		}

	# load tool config
	my $tool_data_orig = LoadFile($tool_config);
	my $tool_data = error_checking(tool_data => $tool_data_orig, pipeline => 'msi');

	# organize output and log directories
	my $output_directory = $args{output_directory};
	$output_directory =~ s/\/$//;

	my $log_directory = join('/', $output_directory, 'logs');
	unless(-e $log_directory) { make_path($log_directory); }

	my $log_file = join('/', $log_directory, 'run_MSI_pipeline.log');

	# create a file to hold job metrics
	my (@files, $run_count, $outfile, $touch_exit_status);
	unless ($args{dry_run}) {
		# initiate a file to hold job metrics
		opendir(LOGFILES, $log_directory) or die "Cannot open $log_directory";
		@files = grep { /slurm_job_metrics/ } readdir(LOGFILES);
		$run_count = scalar(@files) + 1;
		closedir(LOGFILES);

		$outfile = $log_directory . '/slurm_job_metrics_' . $run_count . '.out';
		$touch_exit_status = system("touch $outfile");
		if (0 != $touch_exit_status) { Carp::croak("Cannot touch file $outfile"); }

		$log_file = join('/', $log_directory, 'run_MSI_pipeline_' . $run_count . '.log');
		}

	# start logging
	open (my $log, '>', $log_file) or die "Could not open $log_file for writing.";
	$log->autoflush;

	print $log "---\n";
	print $log "Running MSI pipeline.\n";
	print $log "\n  Tool config used: $tool_config";
	print $log "\n    Reference used: $tool_data->{reference}";

	$reference = $tool_data->{reference};

	print $log "\n    Output directory: $output_directory";
	print $log "\n  Sample config used: $data_config";
	print $log "\n---\n";

	# set tools and versions
	my $msi_pro	= 'msisensor-pro/' . $tool_data->{msi_sensor_version};

	$use_new_msi_sensor_version = 1;
	my $suggested = version->declare('1.2.0')->numify;
	my $given = version->declare($tool_data->{msi_sensor_version})->numify;
	if ($given > $suggested) {
		$use_new_msi_sensor_version = 0;
		}

	my $r_version	= 'R/' . $tool_data->{r_version};

	# get user-specified tool parameters
	my $parameters = $tool_data->{msi_sensor}->{parameters};

	# get optional HPC group
	my $hpc_group = defined($tool_data->{hpc_group}) ? "-A $tool_data->{hpc_group}" : undef;

	### RUN ###########################################################################################
	my ($run_script, $run_id, $link, $intervals_run_id, $baseline_run_id, $should_run_final);
	my (@all_jobs, @baseline_jobs);

	# get sample data
	my $smp_data = LoadFile($data_config);

	unless($args{dry_run}) {
		print "Processing " . scalar(keys %{$smp_data}) . " patients.\n";
		}

	# do an initial check for normals; no normals = don't bother running
	my @has_normals;
	foreach my $patient (sort keys %{$smp_data}) {
		my @normal_ids = keys %{$smp_data->{$patient}->{'normal'}};
		if (scalar(@normal_ids) > 0) { push @has_normals, $patient; }
		}

	if (scalar(@has_normals) == 0) {
		print("No normals provided. MSI-Sensor requires at least 1 normal to estimate baseline distributions, therefore we will exit now.");
		exit;
		}

	# prep MSI intervals file
	my $msi_intervals = join('/', $output_directory, 'msi_reference.list');
	my $format_intervals_cmd = get_format_intervals_command(
		reference	=> $reference,
		output		=> $msi_intervals
		);

	# check if this should be run
	if ('Y' eq missing_file($msi_intervals)) {

		# record command (in log directory) and then run job
		print $log "Submitting job for msisensor SCAN...\n";

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'run_msi_scan_reference',
			cmd	=> $format_intervals_cmd,
			modules	=> [$msi_pro],
			max_time	=> $parameters->{scan}->{time},
			mem		=> $parameters->{scan}->{mem},
			hpc_driver	=> $args{hpc_driver},
			extra_args	=> [$hpc_group]
			);

		$intervals_run_id = submit_job(
			jobname		=> 'run_msi_scan_reference', 
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @baseline_jobs, $intervals_run_id;
		push @all_jobs, $intervals_run_id;
		} else {
		print $log "Skipping SCAN as this has already been completed!\n";
		}

	# generate necessary samples.tsv for baseline
	my $sample_sheet = join('/', $output_directory, 'normal_bams.txt');
	open(my $fh, '>', $sample_sheet) or die "Cannot open '$sample_sheet' !";

	my $tumour_only = 0;

	# organize directory structure
	foreach my $patient (sort keys %{$smp_data}) {

		# find bams
		my @normal_ids = keys %{$smp_data->{$patient}->{'normal'}};
		my @tumour_ids = keys %{$smp_data->{$patient}->{'tumour'}};

		# create some directories
		my $patient_directory = join('/', $output_directory, $patient);
		unless(-e $patient_directory) { make_path($patient_directory); }

		my $link_directory = join('/', $patient_directory, 'bam_links');
		unless(-e $link_directory) { make_path($link_directory); }

		# create some symlinks
		foreach my $normal (@normal_ids) {
			my @tmp = split /\//, $smp_data->{$patient}->{normal}->{$normal};
			$link = join('/', $link_directory, $tmp[-1]);
			symlink($smp_data->{$patient}->{normal}->{$normal}, $link);
			if ($use_new_msi_sensor_version) {
				print $fh "$normal\t$smp_data->{$patient}->{normal}->{$normal}\n";
				}
			}
		foreach my $tumour (@tumour_ids) {
			my @tmp = split /\//, $smp_data->{$patient}->{tumour}->{$tumour};
			$link = join('/', $link_directory, $tmp[-1]);
			symlink($smp_data->{$patient}->{tumour}->{$tumour}, $link);
			}

		# is this a tumour-only case?
		if ( (scalar(@tumour_ids) > 0) & (scalar(@normal_ids) == 0) ) {
			$tumour_only++;
			}
		}

	close $fh;

	# if there are any tumour-only cases; prep the baseline file(s)
	my $baseline_dir = join('/', $output_directory, 'baseline');
	my ($baseline_out, $baseline_cmd);

	if ($tumour_only > 0) {

		unless(-e $baseline_dir) { make_path($baseline_dir); }
		$baseline_out = join('/', $baseline_dir, 'msi_reference.list_baseline');

		if ($use_new_msi_sensor_version) {

			$baseline_cmd = get_baseline_command(
				input_list	=> $sample_sheet,
				output_dir	=> $baseline_dir,
				intervals	=> $msi_intervals,
				seq_type	=> $tool_data->{seq_type}
				);

		} else {

			# open sample sheet for writing
			open(my $fh, '>', $sample_sheet) or die "Cannot open '$sample_sheet' !";

			# check each patient for a normal sample
			foreach my $patient (sort keys %{$smp_data}) {

				# find bams
				my @normal_ids = keys %{$smp_data->{$patient}->{'normal'}};
				next if (scalar(@normal_ids) == 0);

				foreach my $sample (@normal_ids) {

					print $log "\n  PROCESSING BASELINE SAMPLE: $sample\n";
					my $output_stem = join('/', $baseline_dir, 'details', 
						$sample . '_msi_output');

					print $fh "$sample\t$output_stem\_all\n";

					my $msi_command = get_msi_sensor_command(
						tumour		=> $smp_data->{$patient}->{normal}->{$sample},
						output_stem	=> $output_stem,
						ref_input	=> $msi_intervals,
						intervals	=> $tool_data->{targets_bed},
						seq_type	=> $tool_data->{seq_type}
						);

					# check if this should be run
					if ('Y' eq missing_file($output_stem . '_all')) {

						# record command (in log directory) and then run job
						print $log "  >> Submitting job for msi-sensor...\n";

						$run_script = write_script(
							log_dir	=> $log_directory,
							name	=> 'run_msi_sensor_' . $sample,
							cmd	=> $msi_command,
							modules	=> [$msi_pro],
							dependencies	=> $intervals_run_id,
							max_time	=> $parameters->{sensor}->{time},
							mem		=> $parameters->{sensor}->{mem},
							hpc_driver	=> $args{hpc_driver},
							extra_args	=> [$hpc_group]
							);

						$run_id = submit_job(
							jobname		=> 'run_msi_sensor_' . $sample,
							shell_command	=> $run_script,
							hpc_driver	=> $args{hpc_driver},
							dry_run		=> $args{dry_run},
							log_file	=> $log
							);

						push @baseline_jobs, $run_id;
						push @all_jobs, $run_id;
						} else {
						print $log "  >> Skipping msi-sensor because this has already been completed!\n";
						}
					}
				}
		
			close $fh;

			$baseline_cmd = get_baseline_command(
				input_list	=> $sample_sheet,
				output_dir	=> $baseline_dir,
				intervals	=> $msi_intervals,
				seq_type	=> $tool_data->{seq_type}
				);
			}

		# check if this should be run
		if ('Y' eq missing_file($baseline_out)) {

			# record command (in log directory) and then run job
			print $log "Submitting job for msi-sensor baseline...\n";

			$run_script = write_script(
				log_dir	=> $log_directory,
				name	=> 'run_msi_sensor_baseline',
				cmd	=> $baseline_cmd,
				modules	=> [$msi_pro],
				dependencies	=> join(':', @baseline_jobs),
				max_time	=> $parameters->{baseline}->{time},
				mem		=> $parameters->{baseline}->{mem},
				hpc_driver	=> $args{hpc_driver},
				extra_args	=> [$hpc_group]
				);

			$baseline_run_id = submit_job(
				jobname		=> 'run_msi_sensor_baseline',
				shell_command	=> $run_script,
				hpc_driver	=> $args{hpc_driver},
				dry_run		=> $args{dry_run},
				log_file	=> $log
				);

			push @all_jobs, $baseline_run_id;
			} else {
			print $log "Skipping msi-sensor baseline because this has already been completed!\n";
			}
		}

	print $log "\n---";

	# process each sample in $smp_data
	foreach my $patient (sort keys %{$smp_data}) {

		print $log "\nInitiating process for PATIENT: $patient";

		my $patient_directory = join('/', $output_directory, $patient);

		# find bams
		my @normal_ids = keys %{$smp_data->{$patient}->{'normal'}};
		my @tumour_ids = keys %{$smp_data->{$patient}->{'tumour'}};

		# create an array to hold final outputs and all patient job ids
		my (@final_outputs, @patient_jobs, $cleanup_cmd);

		foreach my $sample (@tumour_ids) {

			print $log "\n  SAMPLE: $sample\n";

			my $output_stem = join('/', $patient_directory, $sample . '_msi_output');
			my ($msi_command, $depends);

			if (scalar(@normal_ids) > 0) {
				$msi_command = get_msi_sensor_command(
					tumour		=> $smp_data->{$patient}->{tumour}->{$sample},
					normal		=> $smp_data->{$patient}->{normal}->{$normal_ids[0]},
					output_stem	=> $output_stem,
					ref_input	=> $msi_intervals,
					intervals	=> $tool_data->{targets_bed},
					seq_type	=> $tool_data->{seq_type}
					);
				$depends = $intervals_run_id;

				$cleanup_cmd .= "\nrm $output_stem\_dis;";
				$cleanup_cmd .= "\nrm $output_stem\_germline;";

				} else {
				$msi_command = get_msi_sensor_command(
					tumour		=> $smp_data->{$patient}->{tumour}->{$sample},
					output_stem	=> $output_stem,
					ref_input	=> $baseline_out,
					intervals	=> $tool_data->{targets_bed},
					seq_type	=> $tool_data->{seq_type}
					);
				$depends = $baseline_run_id;

				$cleanup_cmd .= "\nrm $output_stem\_dis;";
				$cleanup_cmd .= "\nrm $output_stem\_all;";
				}

			# check if this should be run
			if ('Y' eq missing_file($output_stem . '.COMPLETE')) {

				# record command (in log directory) and then run job
				print $log "  >> Submitting job for msi-sensor...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_msi_sensor_' . $sample,
					cmd	=> $msi_command,
					modules	=> [$msi_pro],
					dependencies	=> $depends,
					max_time	=> $parameters->{sensor}->{time},
					mem		=> $parameters->{sensor}->{mem},
					hpc_driver	=> $args{hpc_driver},
					extra_args	=> [$hpc_group]
					);

				$run_id = submit_job(
					jobname		=> 'run_msi_sensor_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @patient_jobs, $run_id;
				push @all_jobs, $run_id;
				} else {
				print $log "  >> Skipping msi-sensor because this has already been completed!\n";
				}

			push @final_outputs, $output_stem;

			# if there are any samples to run, we will run the final combine job
			$should_run_final = 1;
			}

		# should intermediate files be removed
		# run per patient
		if ($args{del_intermediates}) {

			unless (scalar(@patient_jobs) == 0) {

				print $log ">> Submitting job to clean up temporary/intermediate files...\n";

				# make sure final output exists before removing intermediate files!
				$cleanup_cmd = join("\n",
					"if [ -s " . join(" ] && [ -s ", @final_outputs) . " ]; then",
					"  $cleanup_cmd",
					"else",
					'  echo "One or more FINAL OUTPUT FILES is missing; not removing intermediates"',
					"fi"
					);

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_cleanup_' . $patient,
					cmd	=> $cleanup_cmd,
					dependencies	=> join(':', @patient_jobs),
					mem		=> '256M',
					hpc_driver	=> $args{hpc_driver},
					kill_on_error	=> 0,
					extra_args	=> [$hpc_group]
					);

				$run_id = submit_job(
					jobname		=> 'run_cleanup_' . $patient,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);
				}
			}

		print $log "\nFINAL OUTPUT:\n" . join("\n  ", @final_outputs) . "\n";
		print $log "---\n";
		}

	# collate results
	if ($should_run_final) {

		my $collect_output = join(' ',
			"Rscript $cwd/collect_msi_estimates.R",
			'-d', $output_directory,
			'-p', $tool_data->{project_name}
			);

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'combine_msi_output',
			cmd	=> $collect_output,
			modules	=> [$r_version],
			dependencies	=> join(':', @all_jobs),
			max_time	=> '12:00:00',
			hpc_driver	=> $args{hpc_driver},
			extra_args	=> [$hpc_group]
			);

		$run_id = submit_job(
			jobname		=> 'combine_msi_output',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @all_jobs, $run_id;
		}

	# if this is not a dry run OR there are jobs to assess (run or resumed with jobs submitted) then
	# collect job metrics (exit status, mem, run time)
	unless ( ($args{dry_run}) || (scalar(@all_jobs) == 0) ) {

		# collect job stats
		my $collect_metrics = collect_job_stats(
			job_ids		=> join(',', @all_jobs),
			outfile		=> $outfile,
			hpc_driver	=> $args{hpc_driver}
			);

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'output_job_metrics_' . $run_count,
			cmd	=> $collect_metrics,
			dependencies	=> join(':', @all_jobs),
			mem		=> '256M',
			hpc_driver	=> $args{hpc_driver},
			kill_on_error	=> 0,
			extra_args	=> [$hpc_group]
			);

		$run_id = submit_job(
			jobname		=> 'output_job_metrics',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @all_jobs, $run_id;

		# do some logging
		print "Number of jobs submitted: " . scalar(@all_jobs) . "\n";

		my $n_queued = `squeue -r | wc -l`;
		print "Total number of jobs in queue: " . $n_queued . "\n";

		# wait until it finishes
		unless ($args{no_wait}) {
			check_final_status(job_id => $run_id);
			}
		}

	# finish up
	print $log "\nProgramming terminated successfully.\n\n";
	close $log;
	}

### GETOPTS AND DEFAULT VALUES #####################################################################
# declare variables
my ($tool_config, $data_config, $output_directory);
my $hpc_driver = 'slurm';
my ($remove_junk, $dry_run, $help, $no_wait);

# get command line arguments
GetOptions(
	'h|help'	=> \$help,
	'd|data=s'	=> \$data_config,
	't|tool=s'	=> \$tool_config,
	'o|out_dir=s'	=> \$output_directory,
	'c|cluster=s'	=> \$hpc_driver,
	'remove'	=> \$remove_junk,
	'dry-run'	=> \$dry_run,
	'no-wait'	=> \$no_wait
	);

if ($help) {
	my $help_msg = join("\n",
		"Options:",
		"\t--help|-h\tPrint this help message",
		"\t--data|-d\t<string> data config (yaml format)",
		"\t--tool|-t\t<string> tool config (yaml format)",
		"\t--out_dir|-o\t<string> path to output directory",
		"\t--cluster|-c\t<string> cluster scheduler (default: slurm)",
		"\t--remove\t<boolean> should intermediates be removed? (default: false)",
		"\t--dry-run\t<boolean> should jobs be submitted? (default: false)",
		"\t--no-wait\t<boolean> should we exit after job submission (true) or wait until all jobs have completed (false)? (default: false)"
		);

	print "$help_msg\n";
	exit;
	}

# do some quick error checks to confirm valid arguments	
if (!defined($tool_config)) { die("No tool config file defined; please provide -t | --tool (ie, tool_config.yaml)"); }
if (!defined($data_config)) { die("No data config file defined; please provide -d | --data (ie, sample_config.yaml)"); }
if (!defined($output_directory)) { die("No output directory defined; please provide -o | --out_dir"); }

main(
	tool_config		=> $tool_config,
	data_config		=> $data_config,
	output_directory	=> $output_directory,
	hpc_driver		=> $hpc_driver,
	del_intermediates	=> $remove_junk,
	dry_run			=> $dry_run,
	no_wait			=> $no_wait
	);
