#!/usr/bin/env perl
### varscan.pl ######################################################################################
use AutoLoader 'AUTOLOAD';
use strict;
use warnings;
use Carp;
use Getopt::Std;
use Getopt::Long;
use POSIX qw(strftime);
use File::Basename;
use File::Path qw(make_path);
use YAML qw(LoadFile);
use List::Util 'first';
use IO::Handle;

my $cwd = dirname(__FILE__);
require "$cwd/utilities.pl";

# define some global variables
our ($reference, $pon, $intervals_bed) = undef;

####################################################################################################
# version       author		comment
# 1.0		sprokopec       script to run VarScan
# 1.1		sprokopec	added help msg and cleaned up code
# 1.2           sprokopec       minor updates for tool config

### USAGE ##########################################################################################
# varscan.pl -t tool_config.yaml -d data_config.yaml -o /path/to/output/dir -c slurm --remove --dry_run
#
# where:
#	-t (tool.yaml) contains tool versions and parameters, reference information, etc.
#	-d (data.yaml) contains sample information (YAML file containing paths to BWA-aligned,
#		GATK-processed BAMs, generated by gatk.pl)
#	-o (/path/to/output/dir) indicates tool-specific output directory
#	-c indicates hpc driver (ie, slurm)
#	--remove indicates that intermediates will be removed
#	--dry_run indicates that this is a dry run

### DEFINE SUBROUTINES #############################################################################
# format command to run VarScan SNV calling
sub get_varscan_snv_command {
	my %args = (
		tumour		=> undef,
		normal		=> undef,
		output_stem	=> undef,
		java_mem	=> undef,
		tmp_dir		=> undef,
		intervals	=> undef,
		output_vcf	=> 0,
		split_by_chr	=> 0,
		@_
		);

	if ($args{split_by_chr}) {
		$args{intervals} = '$CHROM';
		$args{output_stem} .= '__$CHROM';
		}

	my $varscan_command = join(' ',
		'samtools mpileup -B -q1 -d10000',
		'-f', $reference
		);

	if ( (defined($args{intervals})) && ($args{intervals} =~ m/.bed/) ) {
		$varscan_command .= " -l $args{intervals} ";
		} elsif ( (defined($args{intervals})) && ($args{intervals} !~ m/bed/) ) {
		$varscan_command .= " -r $args{intervals} ";
		} else { $varscan_command .= ' '; }

	if (defined($args{normal})) {

		# because I don't have a script to convert this output to vcf, I use the output-vcf option
		# BUT, because downstream tools (Sequenza) need the .snp format, I also run it without
		$varscan_command .= join(' ',
			$args{normal}, $args{tumour},
			'|', 'awk -F"\\t"', "'\$4 > 0 && \$7 > 0'",
			'|', 'java -Xmx' . $args{java_mem},
			'-Djava.io.tmpdir=' . $args{tmp_dir},
			'-jar $varscan_dir/VarScan.jar somatic -',
			$args{output_stem},
			'--mpileup 1'
			);

		if ($args{output_vcf}) {
			$varscan_command .= ' --output-vcf 1';
			}

		} else {

		$varscan_command .= join(' ',
			$args{tumour},
			'|', 'awk -F"\\t"', "'\$4 > 0'",
			'|', 'java -Xmx' . $args{java_mem},
			'-Djava.io.tmpdir=' . $args{tmp_dir},
			'-jar $varscan_dir/VarScan.jar mpileup2cns -',
			'--output-vcf 1 --variants 1',
			'>', $args{output_stem} . '.cns.vcf'
			);
		}

	return($varscan_command);
	}

# format command ro tun VarScan processSomatic
sub get_varscan_process_command {
	my %args = (
		input		=> undef,
		java_mem	=> undef,
		tmp_dir		=> undef,
		@_
		);

	my $process_command = join(' ',
		'java -Xmx' . $args{java_mem},
		'-Djava.io.tmpdir=' . $args{tmp_dir},
		'-jar $varscan_dir/VarScan.jar processSomatic',
		$args{input}
		);

	return($process_command);
	}

# format command to run VarScan CNV calling
sub get_varscan_cnv_command {
	my %args = (
		tumour		=> undef,
		normal		=> undef,
		output_stem	=> undef,
		java_mem	=> undef,
		tmp_dir		=> undef,
		intervals	=> undef,
		@_
		);

	my $varscan_command = join(' ',
		'samtools mpileup -B -q1 -d10000',
		'-f', $reference
		);

	if (defined($args{intervals})) {
		$varscan_command .= " -l $args{intervals} ";
		} else { $varscan_command .= ' '; }

	$varscan_command .= join(' ',
		$args{normal}, $args{tumour},
		'|', 'awk -F"\\t"', "'\$4 > 0 && \$7 > 0'",
		'|', 'java -Xmx' . $args{java_mem},
		'-Djava.io.tmpdir=' . $args{tmp_dir},
		'-jar $varscan_dir/VarScan.jar copynumber -',
		$args{output_stem},
		'--mpileup 1'
		);

	$varscan_command .= "\n\n" . join(' ',
		'java -Xmx' . $args{java_mem},
		'-Djava.io.tmpdir=' . $args{tmp_dir},
		'-jar $varscan_dir/VarScan.jar copyCaller',
		$args{output_stem} . '.copynumber',
		'--output-file', $args{output_stem} . '.copynumber.called'
		);

	return($varscan_command);
	}

# format command to run variant filter
sub get_filter_command {
	my %args = (
		input_vcf	=> undef,
		input_snp	=> undef,
		output_stem	=> undef,
		tmp_dir		=> undef,
		pon		=> undef,
		somatic		=> 0,
		@_
		);

	my $filter_command;

	# if tool used was somatic (T/N pair), split snp/indel into germline/somatic 
	if ($args{somatic}) {

		$filter_command = "if [ ! -s $args{input_vcf}.gz.tbi ]; then\n";
		$filter_command .= "  bgzip $args{input_vcf}\n";
		$filter_command .= "  tabix -p vcf $args{input_vcf}.gz\n";
		$filter_command .= "fi\n\n";

		$filter_command .= join(' ',
			"awk 'NR>1 { print \$1" . '"\t"' . "\$2 }'", "$args{input_snp}.Germline.hc",
			'|', 'bcftools filter',
			'-T - ',
			"--include 'INFO/SS=" . '"1"' . "'",
			"$args{input_vcf}.gz",
			'-O v',
			'-o', $args{output_stem} . "_germline_hc.vcf"
			);

		$filter_command .= "\n\n" . join(' ',
			'md5sum', $args{output_stem} . "_germline_hc.vcf",
			'>', $args{output_stem} . "_germline_hc.vcf.md5"
			);

		$filter_command .= "\n\n" . join("\n",
			"bgzip -f $args{output_stem}\_germline_hc.vcf",
			"tabix -p vcf $args{output_stem}\_germline_hc.vcf.gz",
			);
 
		$filter_command .= "\n\n" . join(' ',
			"awk 'NR>1 { print \$1" . '"\t"' . "\$2 }'", "$args{input_snp}.Somatic.hc",
			'|', 'bcftools filter',
			'-T - ',
			"--include 'INFO/SS=" . '"2"' . "'",
			"$args{input_vcf}.gz",
			'-O v',
			'-o', $args{output_stem} . "_somatic_hc.vcf"
			);

		$filter_command .= "\n\n" . join(' ',
			'md5sum', $args{output_stem} . "_somatic_hc.vcf",
			'>', $args{output_stem} . "_somatic_hc.vcf.md5",
			);

	# else, for tumour-only, split into snp/indel
	} else {
		$filter_command = join(' ',
			'vcftools',
			'--vcf', $args{input_vcf},
			'--keep-filtered PASS',
			'--stdout --recode',
			'--temp', $args{tmp_dir}
			);

		if (defined($args{pon})) {
			$filter_command .= " --exclude-positions $args{pon}";
			}

		$filter_command .= ' > ' . $args{output_stem} . ".vcf";

		$filter_command .= "\n\n" . join(' ',
			"md5sum $args{output_stem}.vcf",
			'>', "$args{output_stem}.vcf.md5"
			);
		}

	return($filter_command);
	}

### MAIN ###########################################################################################
sub main {
	my %args = (
		tool_config		=> undef,
		data_config		=> undef,
		output_directory	=> undef,
		pon			=> undef,
		hpc_driver		=> undef,
		del_intermediates	=> undef,
		dry_run			=> undef,
		no_wait			=> undef,
		@_
		);

	my $tool_config = $args{tool_config};
	my $data_config = $args{data_config};

	### PREAMBLE ######################################################################################
	unless($args{dry_run}) {
		print "Initiating VarScan pipeline...\n";
		}

	# load tool config
	my $tool_data_orig = LoadFile($tool_config);
	my $tool_data = error_checking(tool_data => $tool_data_orig, pipeline => 'varscan');
	my $date = strftime "%F", localtime;

	# organize output and log directories
	my $output_directory = $args{output_directory};
	$output_directory =~ s/\/$//;

	my $log_directory = join('/', $output_directory, 'logs', 'VARSCAN');
	unless(-e $log_directory) { make_path($log_directory); }

	my $log_file = join('/', $log_directory, 'run_VarScan_pipeline.log');

	# create a file to hold job metrics
	my (@files, $run_count, $outfile, $touch_exit_status);
	unless ($args{dry_run}) {
		# initiate a file to hold job metrics
		opendir(LOGFILES, $log_directory) or die "Cannot open $log_directory";
		@files = grep { /slurm_job_metrics/ } readdir(LOGFILES);
		$run_count = scalar(@files) + 1;
		closedir(LOGFILES);

		$outfile = $log_directory . '/slurm_job_metrics_' . $run_count . '.out';
		$touch_exit_status = system("touch $outfile");
		if (0 != $touch_exit_status) { Carp::croak("Cannot touch file $outfile"); }

		$log_file = join('/', $log_directory, 'run_VarScan_pipeline_' . $run_count . '.log');
		}

	# start logging
	open (my $log, '>', $log_file) or die "Could not open $log_file for writing.";
	$log->autoflush;

	print $log "---\n";
	print $log "Running VarScan variant calling pipeline in T/N mode.\n";
	print $log "\n  Tool config used: $tool_config";
	print $log "\n    Reference used: $tool_data->{reference}";

	$reference = $tool_data->{reference};

	my $string;

	if (defined($tool_data->{varscan}->{chromosomes})) {
		$string = $tool_data->{varscan}->{chromosomes};
		} elsif (('exome' eq $tool_data->{seq_type}) && (defined($tool_data->{targets_bed}))) {
		$string = 'exome';
		} elsif (('targeted' eq $tool_data->{seq_type}) && (defined($tool_data->{targets_bed}))) {
		$string = 'exome';
		} elsif ( ('hg38' eq $tool_data->{ref_type}) || ('hg19' eq $tool_data->{ref_type})) {
		$string = 'chr' . join(',chr', 1..22) . ',chrX,chrY';
		} elsif ( ('GRCh37' eq $tool_data->{ref_type}) || ('GRCh37' eq $tool_data->{ref_type})) {
		$string = join(',', 1..22) . ',X,Y';
		} else {
		# if no chromosomes can be determined, run as a whole (very very slow!)
		print $log "  >> Could not determine chromosomes to run\n";
		print $log "  >> Will run full genome, however this will be very very slow!\n";
		$string = 'genome';
		}

	my @chroms = split(',', $string);

	if ( ('exome' eq $tool_data->{seq_type}) || ('targeted' eq $tool_data->{seq_type})) {
		$intervals_bed = $tool_data->{targets_bed};
		$intervals_bed =~ s/\.bed/_padding100bp.bed/;
		print $log "\n    Target intervals: $intervals_bed";
		}

	if (defined($args{pon})) {
		$pon = $args{pon};
		print $log "\n    Panel of normals: $args{pon}";
		}

	print $log "\n    Output directory: $output_directory";
	print $log "\n  Sample config used: $data_config";
	print $log "\n---";

	# set tools and versions
	my $varscan	= 'varscan/' . $tool_data->{varscan_version};
	my $samtools	= 'samtools/' . $tool_data->{samtools_version};
	my $vcftools	= 'vcftools/' . $tool_data->{vcftools_version};
	my $gatk	= 'gatk/' . $tool_data->{gatk_version};
	my $r_version	= 'R/' . $tool_data->{r_version};

	my $vcf2maf = undef;
	if (defined($tool_data->{vcf2maf_version})) {
		$vcf2maf = 'vcf2maf/' . $tool_data->{vcf2maf_version};
		$tool_data->{annotate}->{vcf2maf_path} = undef;
		}

	# get user-specified tool parameters
	my $parameters = $tool_data->{varscan}->{parameters};

	if (!defined($parameters->{create_pon}->{minN})) {
		$parameters->{create_pon}->{minN} = 2;
		}

	# get optional HPC group
	my $hpc_group = defined($tool_data->{hpc_group}) ? "-A $tool_data->{hpc_group}" : undef;

	### RUN ###########################################################################################
	# if multiple chromosomes are to be run (separately):
	my $chr_file = join('/', $output_directory, 'chromosome_list.txt');
	if (scalar(@chroms) > 1) {
		open (my $chr_list, '>', $chr_file) or die "Could not open $chr_file for writing.";
		foreach my $chrom ( @chroms ) {
			print $chr_list "$chrom\n";
			}
		}

	# get sample data
	my $smp_data = LoadFile($data_config);

	unless($args{dry_run}) {
		print "Processing " . scalar(keys %{$smp_data}) . " patients.\n";
		}

	my ($run_script, $cnv_run_id, $varscan_run_id, $run_id, $link, $cleanup_cmd);
	my ($should_run_pon, $should_run_final) = 0;
	my (@all_jobs, @pon_vcfs, @pon_dependencies, @final_jobs);

	my $pon_directory = join('/', $output_directory, 'PanelOfNormals');
	my $pon_intermediates = join('/', $pon_directory, 'intermediate_files');

	# are there any normals available to make a PoN?
	my @normal_samples;
	foreach my $patient (sort keys %{$smp_data}) {
		my @normal_ids = keys %{$smp_data->{$patient}->{'normal'}};
		push @normal_samples, @normal_ids;
		}

	# if any normals are present
	if (scalar(@normal_samples) > 0) { $should_run_pon = 1; }

	if ( (!defined($args{pon})) & ($should_run_pon) ) {
		unless(-e $pon_directory) { make_path($pon_directory); }
		unless(-e $pon_intermediates) { make_path($pon_intermediates); }
		}

	my @tumour_only;

	# process each sample in $smp_data
	foreach my $patient (sort keys %{$smp_data}) {

		print $log "\nInitiating process for PATIENT: $patient";

		# find bams
		my @normal_ids = keys %{$smp_data->{$patient}->{'normal'}};
		my @tumour_ids = keys %{$smp_data->{$patient}->{'tumour'}};

		if (scalar(@normal_ids) == 0) {
			print $log "\n>> No normal BAM provided, skipping patient.\n";
			if (scalar(@tumour_ids) > 0) { push @tumour_only, $patient; }
			next;
			}

		# create some directories
		my $patient_directory = join('/', $output_directory, $patient);
		unless(-e $patient_directory) { make_path($patient_directory); }

		my $tmp_directory = join('/', $patient_directory, 'TEMP');
		unless(-e $tmp_directory) { make_path($tmp_directory); }

		# indicate this should be removed at the end
		$cleanup_cmd = "rm -rf $tmp_directory";

		my $link_directory = join('/', $patient_directory, 'bam_links');
		unless(-e $link_directory) { make_path($link_directory); }

		# create some symlinks
		foreach my $normal (@normal_ids) {
			my @tmp = split /\//, $smp_data->{$patient}->{normal}->{$normal};
			$link = join('/', $link_directory, $tmp[-1]);
			symlink($smp_data->{$patient}->{normal}->{$normal}, $link);
			}
		foreach my $tumour (@tumour_ids) {
			my @tmp = split /\//, $smp_data->{$patient}->{tumour}->{$tumour};
			$link = join('/', $link_directory, $tmp[-1]);
			symlink($smp_data->{$patient}->{tumour}->{$tumour}, $link);
			}

		# create an array to hold final outputs and all patient job ids
		my (@germline_vcfs, @final_outputs, @patient_jobs, @germline_jobs);

		# for T/N pair
		foreach my $sample (@tumour_ids) {

			# if there are any samples to run, we will run the final combine job
			$should_run_final = 1;

			print $log "\n  SAMPLE: $sample\n";

			my $sample_directory = join('/', $patient_directory, $sample);
			unless(-e $sample_directory) { make_path($sample_directory); }

			my $sequenza_directory = join('/', $sample_directory, 'Sequenza');
			unless(-e $sequenza_directory) { make_path($sequenza_directory); }

			$run_id = '';
			$cnv_run_id = '';
			$varscan_run_id = '';
			my @snp_jobs;

			# create output stem
			my $cnv_stem = join('/', $sequenza_directory, $sample . '_VarScan');
			my $output_stem = join('/', $sample_directory, $sample . '_VarScan');

			# start with VarScan CNV caller
			# only for paired tumour/normal
			my $cnv_output = $cnv_stem . '.copynumber.called';
			$cleanup_cmd .= "\nrm $cnv_stem.copynumber";

			my $varscan_command = get_varscan_cnv_command(
				tumour		=> $smp_data->{$patient}->{tumour}->{$sample},
				normal		=> $smp_data->{$patient}->{normal}->{$normal_ids[0]},
				output_stem	=> $cnv_stem,
				java_mem	=> $parameters->{varscan}->{java_mem},
				tmp_dir		=> $tmp_directory,
				intervals	=> $intervals_bed
				);

			$varscan_command .= "\n\nmd5sum $cnv_stem.copynumber > $cnv_stem.copynumber.md5";
			$varscan_command .= "\n\nmd5sum $cnv_output > $cnv_output.md5";

			# check if this should be run
			if ('Y' eq missing_file($cnv_output . ".md5")) {

				# record command (in log directory) and then run job
				print $log "  >> Submitting job for VarScan CNV Caller...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_varscan_cnv_' . $sample,
					cmd	=> $varscan_command,
					modules	=> [$samtools, $varscan],
					max_time	=> $parameters->{varscan}->{time},
					mem		=> $parameters->{varscan}->{mem},
					hpc_driver	=> $args{hpc_driver},
					extra_args	=> [$hpc_group]
					);

				$cnv_run_id = submit_job(
					jobname		=> 'run_varscan_cnv_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @patient_jobs, $cnv_run_id;
				push @all_jobs, $cnv_run_id;
				} else {
				print $log "  >> Skipping VarScan CNV Caller because this has already been completed!\n";
				}

			# next, I also need the .snp output format for Sequenza, so run that here
			my %varscan_commands;
			my (@chr_parts, @chr_jobs, @chr_md5s);

			my $merged_snp_output = $cnv_stem . '__merged';
			if (scalar(@chroms) == 1) {
                                $merged_snp_output = $cnv_stem . '__' . $chroms[0];
                                }

			foreach my $chr ( @chroms ) {

				my $intervals = $chr;

				if ( ('exome' eq $chr) || ('genome' eq $chr) ) {
					$intervals = $intervals_bed;
					}

				$varscan_commands{$chr} = get_varscan_snv_command(
					tumour		=> $smp_data->{$patient}->{tumour}->{$sample},
					normal		=> $smp_data->{$patient}->{normal}->{$normal_ids[0]},
					output_stem	=> "$cnv_stem\__$chr",
					java_mem	=> $parameters->{varscan}->{java_mem},
					tmp_dir		=> $tmp_directory,
					intervals	=> $intervals
					);

				$varscan_commands{$chr} .= "\n\n" . join("\n",
					"md5sum $cnv_stem\__$chr.snp > $cnv_stem\__$chr.snp.md5",
					"md5sum $cnv_stem\__$chr.indel > $cnv_stem\__$chr.indel.md5"
					);

				push @chr_parts, "$cnv_stem\__$chr.snp";
				push @chr_parts, "$cnv_stem\__$chr.indel";
				push @chr_md5s, "$cnv_stem\__$chr.snp.md5";
				}

			# special case if multiple chromosomes and SLURM HPC driver
			if ( (scalar(@chroms) > 1) && ('slurm' eq $args{hpc_driver}) ) {

				$varscan_command = 'CHROM=$(sed -n "$SLURM_ARRAY_TASK_ID"p ' . $chr_file . ')';
				$varscan_command .= "\necho Running chromosome: " . '$CHROM';

				$varscan_command .= "\n\n" . join("\n",
					'if [ -s ' . $cnv_stem . '__$CHROM.snp.md5 ]; then',
					'  Output file for $CHROM already exists',
					'else'
					);

				$varscan_command .= "\n\n " . get_varscan_snv_command(
					tumour		=> $smp_data->{$patient}->{tumour}->{$sample},
					normal		=> $smp_data->{$patient}->{normal}->{$normal_ids[0]},
					output_stem	=> $cnv_stem,
					java_mem	=> $parameters->{varscan}->{java_mem},
					tmp_dir		=> $tmp_directory,
					split_by_chr	=> 1
					);

				$varscan_command .= "\n\n " . join("\n ",
					"md5sum $cnv_stem" . '__$CHROM.snp > ' . $cnv_stem . '__$CHROM.snp.md5',
					"md5sum $cnv_stem" . '__$CHROM.indel > ' . $cnv_stem . '__$CHROM.indel.md5'
					);

				$varscan_command .= "\nfi";

				# check if this should be run
				if (
					('Y' eq missing_file(@chr_md5s)) &&
					('Y' eq missing_file("$merged_snp_output.snp.md5"))
					) {

					# record command (in log directory) and then run job
					print $log "  >> Submitting job for VarScan for Sequenza (split by chromosome)...\n";

					$run_script = write_script(
						log_dir	=> $log_directory,
						name	=> "run_varscan_snv_for_sequenza_split_by_chr\_$sample",
						cmd	=> $varscan_command,
						modules	=> [$samtools, $varscan],
						max_time	=> $parameters->{varscan}->{time},
						mem		=> $parameters->{varscan}->{mem},
						hpc_driver	=> $args{hpc_driver},
						extra_args	=> [$hpc_group, '--array=1-'. scalar(@chroms)]
						);

					$varscan_run_id = submit_job(
						jobname		=> "run_varscan_snv_for_sequenza_split_by_chr\_$sample",
						shell_command	=> $run_script,
						hpc_driver	=> $args{hpc_driver},
						dry_run		=> $args{dry_run},
						log_file	=> $log
						);

					push @chr_jobs, $varscan_run_id;
					push @snp_jobs, $varscan_run_id;
					push @patient_jobs, $varscan_run_id;
					push @all_jobs, $varscan_run_id;
					} else {
					print $log "  >> Skipping VarScan for Sequenza (split by chromosome) because this has already been completed!\n";
					}

				# otherwise, submit one job for each chromosome
				} else {

				foreach my $chr ( @chroms ) {

					$varscan_command = $varscan_commands{$chr};

					# check if this should be run
					if (
						('Y' eq missing_file("$merged_snp_output.snp.md5")) &&
						('Y' eq missing_file("$cnv_stem\__$chr.snp.md5"))
						) {

						# record command (in log directory) and then run job
						print $log "  >> Submitting job for VarScan: $chr (for Sequenza)...\n";

						$run_script = write_script(
							log_dir	=> $log_directory,
							name	=> "run_varscan_snv_for_sequenza\_$sample\_$chr",
							cmd	=> $varscan_command,
							modules	=> [$samtools, $varscan],
							max_time	=> $parameters->{varscan}->{time},
							mem		=> $parameters->{varscan}->{mem},
							hpc_driver	=> $args{hpc_driver},
							extra_args	=> [$hpc_group]
							);

						$varscan_run_id = submit_job(
							jobname		=> "run_varscan_snv_for_sequenza\_$sample\_$chr",
							shell_command	=> $run_script,
							hpc_driver	=> $args{hpc_driver},
							dry_run		=> $args{dry_run},
							log_file	=> $log
							);

						push @chr_jobs, $varscan_run_id;
						push @snp_jobs, $varscan_run_id;
						push @patient_jobs, $varscan_run_id;
						push @all_jobs, $varscan_run_id;
						} else {
						print $log "  >> Skipping VarScan: $chr (for Sequenza)  because this has already been completed!\n";
						}
					}
				}

			# if necessary, merge per-chrom output into a single file
			if (scalar(@chroms) > 1) {

				my @snp_parts = grep { /snp/ } @chr_parts;
				my @indel_parts = grep { /indel/ } @chr_parts;

				my $merge_chr_command = join("\n",
					"cat @snp_parts | awk 'NR <= 1 || !/^chrom/' > $merged_snp_output.snp;",
					"cat @indel_parts | awk 'NR <= 1 || !/^chrom/' > $merged_snp_output.indel;",
					"md5sum $merged_snp_output.snp > $merged_snp_output.snp.md5",
					"md5sum $merged_snp_output.indel > $merged_snp_output.indel.md5"
					);

				$cleanup_cmd .= "\nrm $cnv_stem\__chr*";

				# check if this should be run
				if ('Y' eq missing_file("$merged_snp_output.snp.md5")) {

					# record command (in log directory) and then run job
					print $log "  >> Submitting job for Merge (for Sequenza) step...\n";

					$run_script = write_script(
						log_dir	=> $log_directory,
						name	=> "run_combine_chromosome_output_sequenza\_$sample",
						cmd	=> $merge_chr_command,
						dependencies	=> join(':', @chr_jobs),
						max_time	=> '12:00:00',
						hpc_driver	=> $args{hpc_driver},
						extra_args	=> [$hpc_group]
						);

					$varscan_run_id = submit_job(
						jobname		=> "run_combine_chromosome_output_sequenza\_$sample",
						shell_command	=> $run_script,
						hpc_driver	=> $args{hpc_driver},
						dry_run		=> $args{dry_run},
						log_file	=> $log
						);

					push @snp_jobs, $varscan_run_id;
					push @patient_jobs, $varscan_run_id;
					push @all_jobs, $varscan_run_id;
					} else {
					print $log "  >> Skipping Merge (for Sequenza) because this has already been completed!\n";
					}
				}

			# now, because we have it, process the .snp and .indel files to split into
			# germline/somatic/loh, as well as high and low confidence calls

			# merge the .snp and .indel files
			my $concat_file = $output_stem . '.snp_and_indel';
			my $concat_cmd = "head -n 1 $merged_snp_output.snp > $concat_file";
			$concat_cmd .= "\n\n" . join(' ',
				"cat $merged_snp_output.snp $merged_snp_output.indel",
				'| sort -V -k1,1 -k2,2',
				"| grep -v '^chrom'",
				'>>', $concat_file
				);

			$varscan_command = $concat_cmd . "\n\n" . get_varscan_process_command(
				input		=> $concat_file,
				java_mem	=> '256M',
				tmp_dir		=> $tmp_directory
				);

			$cleanup_cmd .= "\nrm $concat_file.Germline";
			$cleanup_cmd .= "\nrm $concat_file.Somatic";
			$cleanup_cmd .= "\nrm $concat_file.LOH";
			$cleanup_cmd .= "\ngzip $concat_file";

			# check if this should be run
			if ('Y' eq missing_file("$concat_file.Somatic.hc")) {

				# record command (in log directory) and then run job
				print $log "  >> Submitting job for processSomatic...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_varscan_processSomatic_' . $sample,
					cmd	=> $varscan_command,
					modules	=> [$samtools, $varscan],
					dependencies	=> join(':', @snp_jobs),
					max_time	=> '06:00:00',
					hpc_driver	=> $args{hpc_driver},
					extra_args	=> [$hpc_group]
					);

				$varscan_run_id = submit_job(
					jobname		=> 'run_varscan_processSomatic_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @snp_jobs, $varscan_run_id;
				push @patient_jobs, $varscan_run_id;
				push @all_jobs, $varscan_run_id;
				} else {
				print $log "  >> Skipping processSomatic because this has already been completed!\n";
				}

			# Next, run VarScan SNV caller
			@chr_parts = ();
			@chr_jobs = ();
			@chr_md5s = ();

			my %varscan_vcf_commands;

			my $merged_vcf_output = $output_stem . '__merged';
			if (scalar(@chroms) == 1) {
                                $merged_vcf_output = $output_stem . '__' . $chroms[0];
                                }

			foreach my $chr ( @chroms ) {

				my $intervals = $chr;

				if ( ('exome' eq $chr) || ('genome' eq $chr) ) {
					$intervals = $intervals_bed;
					}

				$varscan_vcf_commands{$chr} = get_varscan_snv_command(
					tumour		=> $smp_data->{$patient}->{tumour}->{$sample},
					normal		=> $smp_data->{$patient}->{normal}->{$normal_ids[0]},
					output_stem	=> "$output_stem\__$chr",
					java_mem	=> $parameters->{varscan}->{java_mem},
					tmp_dir		=> $tmp_directory,
					intervals	=> $intervals,
					output_vcf	=> 1
					);

				$varscan_vcf_commands{$chr} .= "\n\n" . join("\n",
					"md5sum $output_stem\__$chr.snp.vcf > $output_stem\__$chr.snp.vcf.md5",
					"md5sum $output_stem\__$chr.indel.vcf > $output_stem\__$chr.indel.vcf.md5"
					);

				push @chr_parts, "$output_stem\__$chr.snp.vcf";
				push @chr_parts, "$output_stem\__$chr.indel.vcf";
				push @chr_md5s, "$output_stem\__$chr.snp.vcf.md5";
				}

			# special case if multiple chromosomes and SLURM HPC driver
			if ( (scalar(@chroms) > 1) && ('slurm' eq $args{hpc_driver}) ) {

				$varscan_command = 'CHROM=$(sed -n "$SLURM_ARRAY_TASK_ID"p ' . $chr_file . ')';
				$varscan_command .= "\necho Running chromosome: " . '$CHROM';

				$varscan_command .= "\n\n" . join("\n",
					'if [ -s ' . $output_stem . '__$CHROM.snp.vcf.md5 ]; then',
					'  Output file for $CHROM already exists',
					'else'
					);

				$varscan_command .= "\n\n " . get_varscan_snv_command(
					tumour		=> $smp_data->{$patient}->{tumour}->{$sample},
					normal		=> $smp_data->{$patient}->{normal}->{$normal_ids[0]},
					output_stem	=> $output_stem,
					java_mem	=> $parameters->{varscan}->{java_mem},
					tmp_dir		=> $tmp_directory,
					split_by_chr	=> 1,
					output_vcf	=> 1
					);

				$varscan_command .= "\n\n " . join("\n ",
					join(' ', 'md5sum', $output_stem . '__$CHROM.snp.vcf',
						'>', $output_stem . '__$CHROM.snp.vcf.md5'),
					join(' ', 'md5sum', $output_stem . '__$CHROM.indel.vcf',
						'>', $output_stem . '__$CHROM.indel.vcf.md5')
					);

				$varscan_command .= "\nfi";

				# check if this should be run
				if (
					('Y' eq missing_file(@chr_md5s)) &&
					('Y' eq missing_file("$merged_vcf_output.snp_and_indel.vcf.md5"))
					) {

					# record command (in log directory) and then run job
					print $log "  >> Submitting job for VarScan (split by chromosome)...\n";

					$run_script = write_script(
						log_dir	=> $log_directory,
						name	=> "run_varscan_snv_vcf_split_by_chr\_$sample",
						cmd	=> $varscan_command,
						modules	=> [$samtools, $varscan],
						max_time	=> $parameters->{varscan}->{time},
						mem		=> $parameters->{varscan}->{mem},
						hpc_driver	=> $args{hpc_driver},
						extra_args	=> [$hpc_group, '--array=1-'. scalar(@chroms)]
						);

					$varscan_run_id = submit_job(
						jobname		=> "run_varscan_snv_vcf_split_by_chr\_$sample",
						shell_command	=> $run_script,
						hpc_driver	=> $args{hpc_driver},
						dry_run		=> $args{dry_run},
						log_file	=> $log
						);

					push @chr_jobs, $varscan_run_id;
					push @snp_jobs, $varscan_run_id;
					push @patient_jobs, $varscan_run_id;
					push @all_jobs, $varscan_run_id;
					} else {
					print $log "  >> Skipping VarScan (split by chromosome) because this has already been completed!\n";
					}

				# otherwise, submit one job for each chromosome
				} else {

				foreach my $chr ( @chroms ) {

					$varscan_command = $varscan_vcf_commands{$chr};

					# check if this should be run
					if (
						('Y' eq missing_file("$merged_vcf_output.snp_and_indel.vcf.md5")) &&
						('Y' eq missing_file("$output_stem\__$chr.snp.vcf.md5"))
						) {

						# record command (in log directory) and then run job
						print $log "  >> Submitting job for VarScan: $chr (for VCF output)...\n";

						$run_script = write_script(
							log_dir	=> $log_directory,
							name	=> "run_varscan_snv_vcf\_$sample\_$chr",
							cmd	=> $varscan_command,
							modules	=> [$samtools, $varscan],
							max_time	=> $parameters->{varscan}->{time},
							mem		=> $parameters->{varscan}->{mem},
							hpc_driver	=> $args{hpc_driver},
							extra_args	=> [$hpc_group]
							);

						$run_id = submit_job(
							jobname		=> "run_varscan_snv_vcf\_$sample\_$chr",
							shell_command	=> $run_script,
							hpc_driver	=> $args{hpc_driver},
							dry_run		=> $args{dry_run},
							log_file	=> $log
							);

						push @chr_jobs, $run_id;
						push @snp_jobs, $run_id;
						push @patient_jobs, $run_id;
						push @all_jobs, $run_id;
						} else {
						print $log "  >> Skipping VarScan: $chr because this has already been completed!\n";
						}
					}
				}

			# if necessary, merge per-chrom output into a single file
			my $merge_command = join(' ',
				'vcf-concat', @chr_parts,
				'| vcf-sort -c',
				'>', "$merged_vcf_output.snp_and_indel.vcf"
				);

			$merge_command .= "\n\n" . join("\n",
				"md5sum $merged_vcf_output.snp_and_indel.vcf > $merged_vcf_output.snp_and_indel.vcf.md5",
				"bgzip -f $merged_vcf_output.snp_and_indel.vcf",
				"tabix -p vcf $merged_vcf_output.snp_and_indel.vcf.gz"
				);

			if (scalar(@chroms) > 1) {
				$cleanup_cmd .= "\nrm $output_stem\__chr*";
				} else {
				$cleanup_cmd .= "\nrm $merged_vcf_output" . ".snp.vcf";
				$cleanup_cmd .= "\nrm $merged_vcf_output" . ".indel.vcf";
				}

			# check if this should be run
			if ('Y' eq missing_file("$merged_vcf_output.snp_and_indel.vcf.md5")) {

				# record command (in log directory) and then run job
				print $log "  >> Submitting job for Merge VCF step...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> "run_merge_varscan_vcfs\_$sample",
					cmd	=> $merge_command,
					modules	=> [$vcftools, 'tabix'],
					dependencies	=> join(':', @chr_jobs),
					max_time	=> '12:00:00',
					hpc_driver	=> $args{hpc_driver},
					extra_args	=> [$hpc_group]
					);

				$run_id = submit_job(
					jobname		=> "run_merge_varscan_vcfs\_$sample",
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @snp_jobs, $run_id;
				push @patient_jobs, $run_id;
				push @all_jobs, $run_id;
				} else {
				print $log "  >> Skipping Merge VCF because this has already been completed!\n";
				}

			# filter results
			my $filter_command = get_filter_command(
				input_vcf	=> "$merged_vcf_output.snp_and_indel.vcf",
				input_snp	=> $concat_file,
				output_stem	=> $merged_vcf_output,
				somatic		=> 1
				);

			push @germline_vcfs, $merged_vcf_output . "_germline_hc.vcf.gz";

			$cleanup_cmd .= "\nrm $merged_vcf_output\_somatic_hc.vcf";

			# check if this should be run
			if ('Y' eq missing_file($merged_vcf_output . '_somatic_hc.vcf.md5')) {

				# record command (in log directory) and then run job
				print $log "  >> Submitting job for VCF-Filter...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_vcf_filter_' . $sample,
					cmd	=> $filter_command,
					modules	=> [$samtools, 'tabix'],
					dependencies	=> join(':', @snp_jobs),
					max_time	=> $parameters->{filter}->{time},
					mem		=> $parameters->{filter}->{mem},
					hpc_driver	=> $args{hpc_driver},
					extra_args	=> [$hpc_group]
					);

				$run_id = submit_job(
					jobname		=> 'run_vcf_filter_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @germline_jobs, $run_id;
				push @patient_jobs, $run_id;
				push @all_jobs, $run_id;
				} else {
				print $log "  >> Skipping VCF-Filter because this has already been completed!\n";
				}

			### Run variant annotation (VEP + vcf2maf)
			my $final_maf = $output_stem . '_somatic_hc_annotated.maf';
			my $final_vcf = $merged_vcf_output . '_somatic_hc.vep.vcf';

			my $vcf2maf_cmd = get_vcf2maf_command(
				input		=> $merged_vcf_output . '_somatic_hc.vcf',
				tumour_id	=> $sample,
				normal_id	=> $normal_ids[0],
				reference	=> $reference,
				ref_type	=> $tool_data->{ref_type},
				output		=> $final_maf,
				tmp_dir		=> $sample_directory,
				parameters	=> $tool_data->{annotate}
				);

			# check if this should be run
			if ('Y' eq missing_file($final_maf . '.md5')) {

				# make sure to remove temp files from previous attempts
				if ('N' eq missing_file($final_vcf)) {
					`rm $final_vcf`;
					}

				# IF THIS FINAL STEP IS SUCCESSFULLY RUN
				$vcf2maf_cmd .= "\n\n" . join("\n",
					"if [ -s $final_maf ]; then",
					"  md5sum $final_maf > $final_maf.md5",
					"  md5sum $final_vcf > $final_vcf.md5",
					"  bgzip $final_vcf",
					"  tabix -p vcf $final_vcf.gz",
					"else",
					'  echo "FINAL OUTPUT MAF is missing; not running md5sum/bgzip/tabix..."',
					"fi"
					);

				# record command (in log directory) and then run job
				print $log "  >> Submitting job for T/N vcf2maf...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_vcf2maf_and_VEP_' . $sample,
					cmd	=> $vcf2maf_cmd,
					modules	=> ['perl', $samtools, 'tabix', $vcf2maf],
					dependencies	=> $run_id,
					cpus_per_task	=> $tool_data->{annotate}->{n_cpus},
					max_time	=> $tool_data->{annotate}->{time},
					mem		=> $tool_data->{annotate}->{mem},
					hpc_driver	=> $args{hpc_driver},
					extra_args	=> [$hpc_group]
					);

				$run_id = submit_job(
					jobname		=> 'run_vcf2maf_and_VEP_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @patient_jobs, $run_id;
				push @all_jobs, $run_id;
				push @final_jobs, $run_id;
				} else {
				print $log "  >> Skipping vcf2maf because this has already been completed!\n";
				}

			push @final_outputs, $final_maf;
			}

		# before making the PoN, we will collapse results from multi-tumour patients
		unless (defined($args{pon})) {

			# for any germline calls from T/N pairs
			my $merged_germline = join('/', $pon_intermediates, $patient . '_germline_variants.vcf');

			# first, run any normal-only samples
			if ( (scalar(@tumour_ids) == 0) && (scalar(@normal_ids) > 0) ) {

				print $log "\n  NORMAL ONLY: $normal_ids[0]\n";

				my $output_stem = join('/', $pon_intermediates, $normal_ids[0] . '_VarScan');

				my $varscan_command = get_varscan_snv_command(
					tumour		=> $smp_data->{$patient}->{normal}->{$normal_ids[0]},
					output_stem	=> $output_stem,
					java_mem	=> $parameters->{varscan}->{java_mem},
					tmp_dir		=> $tmp_directory,
					intervals	=> $intervals_bed
					);

				$varscan_command .= "\n\n" . join("\n",
					"md5sum $output_stem.cns.vcf > $output_stem.cns.vcf.md5",
					"bgzip $output_stem.cns.vcf",
					"tabix -p vcf $output_stem.cns.vcf.gz"
					);

				$cleanup_cmd .= "\nrm $output_stem.cns.vcf.gz";
				push @germline_vcfs, "$output_stem.cns.vcf.gz";

				# check if this should be run
				if ('Y' eq missing_file("$output_stem.cns.vcf.md5")) {

					# record command (in log directory) and then run job
					print $log "  >> Submitting job for VarScan...\n";

					$run_script = write_script(
						log_dir	=> $log_directory,
						name	=> "run_varscan_snv_normalonly_$normal_ids[0]",
						cmd	=> $varscan_command,
						modules	=> [$samtools, $varscan, 'tabix'],
						max_time	=> $parameters->{varscan}->{time},
						mem		=> $parameters->{varscan}->{mem},
						hpc_driver	=> $args{hpc_driver},
						extra_args	=> [$hpc_group]
						);

					$run_id = submit_job(
						jobname		=> "run_varscan_snv_normalonly_$normal_ids[0]",
						shell_command	=> $run_script,
						hpc_driver	=> $args{hpc_driver},
						dry_run		=> $args{dry_run},
						log_file	=> $log
						);

					push @germline_jobs, $run_id;
					push @patient_jobs, $run_id;
					push @all_jobs, $run_id;
					} else {
					print $log "  >> Skipping VarScan because this has already been completed!\n";
					}
				}

			# for multiple tumours, collect all variants, then subset the normal
			my $format_germline_cmd;

			if (scalar(@tumour_ids) > 1) {

				$format_germline_cmd = join(' ',
					'vcf-isec -n +1',
					@germline_vcfs,
					'| vcf-subset -c NORMAL',
					'>', $merged_germline
					);

				# for a single tumour, simply subset the normal
				} elsif (scalar(@tumour_ids) == 1) {

				$format_germline_cmd = join(' ',
					'vcf-subset -c NORMAL',
					$germline_vcfs[0],
					'>', $merged_germline
					);

				# for normal-only samples
				} elsif ( (scalar(@tumour_ids) == 0) && (scalar(@normal_ids) > 0) ) {

				$format_germline_cmd = join(' ',
					'vcf-subset -c Sample1',
					$germline_vcfs[0],
					'>', $merged_germline
					);
				}

			$format_germline_cmd .= "\n\n" . join("\n",
				"md5sum $merged_germline > $merged_germline.md5",
				"bgzip $merged_germline",
				"tabix $merged_germline.gz"
				);

			if ('Y' eq missing_file($merged_germline . '.md5')) {

				# record command (in log directory) and then run job
				print $log "  >> Submitting job for PoN prep...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'collapse_germline_calls_' . $patient,
					cmd	=> $format_germline_cmd,
					modules	=> ['perl', $vcftools, 'tabix'],
					dependencies	=> join(':', @germline_jobs),
					max_time	=> '06:00:00',
					hpc_driver	=> $args{hpc_driver},
					extra_args	=> [$hpc_group]
					);

				$run_id = submit_job(
					jobname		=> 'collapse_germline_calls_' . $patient,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @pon_dependencies, $run_id;
				push @patient_jobs, $run_id;
				push @all_jobs, $run_id;
				}

			push @pon_vcfs, "-V:$patient $merged_germline.gz";
			}

		# should intermediate files be removed
		# run per patient
		if ($args{del_intermediates}) {

			if (scalar(@patient_jobs) == 0) {
				`rm -rf $tmp_directory`;

				} else {

				print $log ">> Submitting job to clean up temporary/intermediate files...\n";

				# make sure final output exists before removing intermediate files!
				my @files_to_check;
				foreach my $tmp ( @final_outputs ) {
					push @files_to_check, $tmp . '.md5';
					}

				$cleanup_cmd = join("\n",
					"if [ -s " . join(" ] && [ -s ", @files_to_check) . " ]; then",
					"  $cleanup_cmd",
					"else",
					'  echo "One or more FINAL OUTPUT FILES is missing; not removing intermediates"',
					"fi"
					);

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_cleanup_' . $patient,
					cmd	=> $cleanup_cmd,
					dependencies	=> join(':', @patient_jobs),
					mem		=> '256M',
					hpc_driver	=> $args{hpc_driver},
					kill_on_error	=> 0,
					extra_args	=> [$hpc_group]
					);

				$run_id = submit_job(
					jobname		=> 'run_cleanup_' . $patient,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);
				}
			}

		print $log "\nFINAL OUTPUT:\n" . join("\n  ", @final_outputs) . "\n";
		print $log "---\n";
		}

	my $pon_job_id = '';
	if ( (!defined($args{pon})) && ($should_run_pon) ) {
	
		print $log "\n---\nCreating Panel of Normals...\n";

		# let's create a command and write script to combine variants for a PoN
		$pon		= join('/', $pon_directory, $date . "_merged_panelOfNormals.vcf");
		my $final_pon_link = join('/', $output_directory, 'panel_of_normals.vcf');

		# create a trimmed (sites only) output (this is the panel of normals)
		my $pon_command = generate_pon(
			input		=> join(' ', @pon_vcfs),
			output		=> $pon,
			reference	=> $reference,
			java_mem	=> $parameters->{create_pon}->{java_mem},
			minN		=> $parameters->{create_pon}->{minN},
			tmp_dir		=> $output_directory,
			out_type	=> 'trimmed'
			);

		if (-l $final_pon_link) {
			unlink $final_pon_link or die "Failed to remove previous symlink: $final_pon_link";
			}

		symlink($pon, $final_pon_link);

		$pon_command .= "\nmd5sum $pon > $pon.md5";

		# record command (in log directory) and then run job
		print $log "  >> Submitting job for Create PoN...\n";

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'create_sitesOnly_trimmed_panel_of_normals',
			cmd	=> $pon_command,
			modules	=> [$gatk],
			dependencies	=> join(':', @pon_dependencies),
			max_time	=> $parameters->{create_pon}->{time},
			mem		=> $parameters->{create_pon}->{mem},
			hpc_driver	=> $args{hpc_driver},
			extra_args	=> [$hpc_group]
			);

		$pon_job_id = submit_job(
			jobname		=> 'create_sitesOnly_trimmed_panel_of_normals',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @all_jobs, $pon_job_id;
		}

	#########################################
	### BEGIN PROCESSING UNPAIRED SAMPLES ###
	#########################################
	if (scalar(@tumour_only) > 0) {
		print $log "\n\n>>>Beginning processing of tumour-only samples<<<\n\n";
		}

	# process each sample in $smp_data
	foreach my $patient (@tumour_only) {

		print $log "\nInitiating process for PATIENT: $patient";

		# find bams
		my @normal_ids = keys %{$smp_data->{$patient}->{'normal'}};
		my @tumour_ids = keys %{$smp_data->{$patient}->{'tumour'}};

		next if (scalar(@normal_ids) > 0);

		# create some directories
		my $patient_directory = join('/', $output_directory, $patient);
		unless(-e $patient_directory) { make_path($patient_directory); }

		my $tmp_directory = join('/', $patient_directory, 'TEMP');
		unless(-e $tmp_directory) { make_path($tmp_directory); }

		# indicate this should be removed at the end
		$cleanup_cmd = "rm -rf $tmp_directory";

		my $link_directory = join('/', $patient_directory, 'bam_links');
		unless(-e $link_directory) { make_path($link_directory); }

		# create some symlinks
		foreach my $tumour (@tumour_ids) {
			my @tmp = split /\//, $smp_data->{$patient}->{tumour}->{$tumour};
			$link = join('/', $link_directory, $tmp[-1]);
			symlink($smp_data->{$patient}->{tumour}->{$tumour}, $link);
			}

		# create an array to hold final outputs and all patient job ids
		my (@final_outputs, @patient_jobs);

		# for each tumour-only sample 
		foreach my $sample (@tumour_ids) {

			# if there are any samples to run, we will run the final combine job
			$should_run_final = 1;

			print $log "\n  SAMPLE: $sample\n";

			my $sample_directory = join('/', $patient_directory, $sample);
			unless(-e $sample_directory) { make_path($sample_directory); }

			$varscan_run_id = '';
			my @snp_jobs;

			# run VarScan
			my %varscan_commands;
			my (@chr_parts, @chr_jobs, @chr_md5s);

			my $output_stem = join('/', $sample_directory, $sample . '_VarScan');
			my $merged_output = $output_stem . '__merged.cns.vcf';
			if (scalar(@chroms) == 1) {
                                $merged_output = $output_stem . '__' . $chroms[0] . '.cns.vcf';
                                }

			foreach my $chr ( @chroms ) {

				my $intervals = $chr;

				if ( ('exome' eq $chr) || ('genome' eq $chr) ) {
					$intervals = $intervals_bed;
					$cleanup_cmd .= "\nrm $output_stem\__$chr.cns.vcf";
					}

				$varscan_commands{$chr} = get_varscan_snv_command(
					tumour		=> $smp_data->{$patient}->{tumour}->{$sample},
					output_stem	=> "$output_stem\__$chr",
					java_mem	=> $parameters->{varscan}->{java_mem},
					tmp_dir		=> $tmp_directory,
					intervals	=> $intervals
					);

				$varscan_commands{$chr} .= "\n\nmd5sum $output_stem\__$chr.cns.vcf > $output_stem\__$chr.cns.vcf.md5";

				push @chr_parts, "$output_stem\__$chr.cns.vcf";
				push @chr_md5s, "$output_stem\__$chr.cns.vcf.md5";
				}

			# special case if multiple chromosomes and SLURM HPC driver
			my $varscan_command;

			if ( (scalar(@chroms) > 1) && ('slurm' eq $args{hpc_driver}) ) {

				$varscan_command = 'CHROM=$(sed -n "$SLURM_ARRAY_TASK_ID"p ' . $chr_file . ')';
				$varscan_command .= "\necho Running chromosome: " . '$CHROM';

				$varscan_command .= "\n\n" . join("\n",
					'if [ -s ' . $output_stem . '__$CHROM.cns.vcf.md5 ]; then',
					'  Output file for $CHROM already exists',
					'else'
					);

				$varscan_command .= "\n\n " . get_varscan_snv_command(
					tumour		=> $smp_data->{$patient}->{tumour}->{$sample},
					output_stem	=> $output_stem,
					java_mem	=> $parameters->{varscan}->{java_mem},
					tmp_dir		=> $tmp_directory,
					split_by_chr	=> 1
					);

				$varscan_command .= "\n\n " . join(' ',
					'md5sum', $output_stem . '__$CHROM.cns.vcf',
					'>', $output_stem . '__$CHROM.cns.vcf.md5'
					);

				$varscan_command .= "\nfi";

				# check if this should be run
				if (
					('Y' eq missing_file(@chr_md5s)) &&
					('Y' eq missing_file("$merged_output.md5"))
					) {

					# record command (in log directory) and then run job
					print $log "  >> Submitting job for VarScan (split by chromosome)...\n";

					$run_script = write_script(
						log_dir	=> $log_directory,
						name	=> "run_varscan_snv_vcf_split_by_chr\_$sample",
						cmd	=> $varscan_command,
						modules	=> [$samtools, $varscan],
						max_time	=> $parameters->{varscan}->{time},
						mem		=> $parameters->{varscan}->{mem},
						hpc_driver	=> $args{hpc_driver},
						extra_args	=> [$hpc_group, '--array=1-'. scalar(@chroms)]
						);

					$varscan_run_id = submit_job(
						jobname		=> 'run_varscan_snv_vcf_split_by_chr_' . $sample,
						shell_command	=> $run_script,
						hpc_driver	=> $args{hpc_driver},
						dry_run		=> $args{dry_run},
						log_file	=> $log
						);

					push @chr_jobs, $varscan_run_id;
					push @snp_jobs, $varscan_run_id;
					push @patient_jobs, $varscan_run_id;
					push @all_jobs, $varscan_run_id;
					} else {
					print $log "  >> Skipping VarScan (split by chromosome) because this has already been completed!\n";
					}

				# otherwise, submit one job for each chromosome
				} else {

				foreach my $chr ( @chroms ) {

					$varscan_command = $varscan_commands{$chr};

					# check if this should be run
					if (
						('Y' eq missing_file("$merged_output.md5")) &&
						('Y' eq missing_file("$output_stem\__$chr.cns.vcf.md5"))
						) {

						# record command (in log directory) and then run job
						print $log "  >> Submitting job for VarScan ($chr)...\n";

						$run_script = write_script(
							log_dir	=> $log_directory,
							name	=> "run_varscan_snv\_$sample\_$chr",
							cmd	=> $varscan_command,
							modules	=> [$samtools, $varscan],
							max_time	=> $parameters->{varscan}->{time},
							mem		=> $parameters->{varscan}->{mem},
							hpc_driver	=> $args{hpc_driver},
							extra_args	=> [$hpc_group]
							);

						$varscan_run_id = submit_job(
							jobname		=> "run_varscan_snv\_$sample\_$chr",
							shell_command	=> $run_script,
							hpc_driver	=> $args{hpc_driver},
							dry_run		=> $args{dry_run},
							log_file	=> $log
							);

						push @chr_jobs, $varscan_run_id;
						push @snp_jobs, $varscan_run_id;
						push @patient_jobs, $varscan_run_id;
						push @all_jobs, $varscan_run_id;
						} else {
						print $log "  >> Skipping VarScan ($chr) because this has already been completed!\n";
						}
					}
				}

			# if necessary, merge per-chrom output into a single file
			if (scalar(@chroms) > 1) {

				my $merge_chr_command = join(' ',
					'vcf-concat',
					@chr_parts,
					'>', "$merged_output;\n",
					"md5sum $merged_output > $merged_output.md5\n",
					);

				$cleanup_cmd .= "\nrm $output_stem\__chr*";

				# check if this should be run
				if ('Y' eq missing_file("$merged_output.md5")) {

					# record command (in log directory) and then run job
					print $log "  >> Submitting job for Merge VCF step...\n";

					$run_script = write_script(
						log_dir	=> $log_directory,
						name	=> "run_combine_chromosome_output\_$sample",
						cmd	=> $merge_chr_command,
						modules	=> ['vcftools/0.1.15'],
						dependencies	=> join(':', @chr_jobs),
						max_time	=> '12:00:00',
						hpc_driver	=> $args{hpc_driver},
						extra_args	=> [$hpc_group]
						);

					$varscan_run_id = submit_job(
						jobname		=> "run_combine_chromosome_output\_$sample",
						shell_command	=> $run_script,
						hpc_driver	=> $args{hpc_driver},
						dry_run		=> $args{dry_run},
						log_file	=> $log
						);

					push @snp_jobs, $varscan_run_id;
					push @patient_jobs, $varscan_run_id;
					push @all_jobs, $varscan_run_id;
					} else {
					print $log "  >> Skipping Merge VCF because this has already been completed!\n";
					}
				}

			# filter results
			my $filter_command = get_filter_command(
				input_vcf	=> $merged_output,
				output_stem	=> $output_stem . '_filtered',
				pon		=> $pon,
				tmp_dir		=> $tmp_directory
				);

			# check if this should be run
			if ('Y' eq missing_file("$output_stem\_filtered.vcf.md5")) {

				# record command (in log directory) and then run job
				print $log "  >> Submitting job for VCF-Filter...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_vcf_filter_' . $sample,
					cmd	=> $filter_command,
					modules	=> [$samtools, $vcftools],
					dependencies	=> join(':',$varscan_run_id,$pon_job_id),
					max_time	=> $parameters->{filter}->{time},
					mem		=> $parameters->{filter}->{mem},
					hpc_driver	=> $args{hpc_driver},
					extra_args	=> [$hpc_group]
					);

				$run_id = submit_job(
					jobname		=> 'run_vcf_filter_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @snp_jobs, $run_id;
				push @patient_jobs, $run_id;
				push @all_jobs, $run_id;
				} else {
				print $log "  >> Skipping VCF-Filter because this has already been completed!\n";
				}

			### Run variant annotation (VEP + vcf2maf)
			my $final_maf = $output_stem . '_annotated.maf';
			my $final_vcf = $output_stem . '_filtered.vep.vcf';

			my $vcf2maf_cmd = get_vcf2maf_command(
				input		=> "$output_stem\_filtered.vcf",
				tumour_id       => $sample,
				reference       => $reference,
				ref_type	=> $tool_data->{ref_type},
				output		=> $final_maf,
				tmp_dir		=> $sample_directory,
				parameters	=> $tool_data->{annotate}
				);

			my @dependencies = grep { $_ ne '' } @snp_jobs;
			if (scalar(@dependencies) == 0) { @dependencies[0] = ''; }

			# check if this should be run
			if ('Y' eq missing_file($final_maf . '.md5')) {

				# make sure to remove temp files from previous attempts
				if ('N' eq missing_file($final_vcf)) {
					`rm $final_vcf`;
					}

				# IF THIS FINAL STEP IS SUCCESSFULLY RUN,
				$vcf2maf_cmd .= "\n\n" . join("\n",
					"if [ -s $final_maf ]; then",
					"  md5sum $final_maf > $final_maf.md5",
					"  md5sum $final_vcf > $final_vcf.md5",
					"  bgzip $final_vcf",
					"  tabix -p vcf $final_vcf.gz",
					"else",
					'  echo "FINAL OUTPUT MAF is missing; not running md5sum/bgzip/tabix..."',
					"fi"
					);

				# record command (in log directory) and then run job
				print $log "  >> Submitting job for tumour-only vcf2maf...\n";

				$run_script = write_script(
					log_dir => $log_directory,
					name    => 'run_vcf2maf_and_VEP_' . $sample,
					cmd     => $vcf2maf_cmd,
					modules => ['perl', $samtools, 'tabix', $vcf2maf],
					dependencies	=> join(':', @dependencies),
					cpus_per_task	=> $tool_data->{annotate}->{n_cpus},
					max_time	=> $tool_data->{annotate}->{time},
					mem		=> $tool_data->{annotate}->{mem},
					hpc_driver	=> $args{hpc_driver},
					extra_args	=> [$hpc_group]
					);

				$run_id = submit_job(
					jobname		=> 'run_vcf2maf_and_VEP_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @patient_jobs, $run_id;
				push @all_jobs, $run_id;
				push @final_jobs, $run_id;
				} else {
				print $log "  >> Skipping vcf2maf because this has already been completed!\n";
				}

			push @final_outputs, $final_maf;
			}

		# should intermediate files be removed
		# run per patient
		if ($args{del_intermediates}) {

			if (scalar(@patient_jobs) == 0) {
				`rm -rf $tmp_directory`;
				} else {

				print $log ">> Submitting job to clean up temporary/intermediate files...\n";

				# make sure final output exists before removing intermediate files!
				my @files_to_check;
				foreach my $tmp ( @final_outputs ) {
					push @files_to_check, $tmp . '.md5';
					}

				$cleanup_cmd = join("\n",
					"if [ -s " . join(" ] && [ -s ", @files_to_check) . " ]; then",
					"  $cleanup_cmd",
					"else",
					'  echo "One or more FINAL OUTPUT FILES is missing; not removing intermediates"',
					"fi"
					);

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_cleanup_' . $patient,
					cmd	=> $cleanup_cmd,
					dependencies	=> join(':', @patient_jobs),
					mem		=> '256M',
					hpc_driver	=> $args{hpc_driver},
					kill_on_error	=> 0,
					extra_args	=> [$hpc_group]
					);

				$run_id = submit_job(
					jobname		=> 'run_cleanup_' . $patient,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);
				}
			}

		print $log "\nFINAL OUTPUT:\n" . join("\n  ", @final_outputs) . "\n";
		print $log "---\n";
		}

	# collate results
	if ($should_run_final) {

		my $collect_output = join(' ',
			"Rscript $cwd/collect_snv_output.R",
			'-d', $output_directory,
			'-p', $tool_data->{project_name}
			);

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'combine_variant_calls',
			cmd	=> $collect_output,
			modules	=> [$r_version],
			dependencies	=> join(':', @final_jobs),
			mem		=> '4G',
			max_time	=> '24:00:00',
			hpc_driver	=> $args{hpc_driver},
			extra_args	=> [$hpc_group]
			);

		$run_id = submit_job(
			jobname		=> 'combine_variant_calls',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @all_jobs, $run_id;
		}

	# if this is not a dry run OR there are jobs to assess (run or resumed with jobs submitted) then
	# collect job metrics (exit status, mem, run time)
	unless ( ($args{dry_run}) || (scalar(@all_jobs) == 0) ) {

		# collect job stats
		my $collect_metrics = collect_job_stats(
			job_ids		=> join(',', @all_jobs),
			outfile		=> $outfile,
			hpc_driver	=> $args{hpc_driver}
			);

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'output_job_metrics_' . $run_count,
			cmd	=> $collect_metrics,
			dependencies	=> join(':', @all_jobs),
			mem		=> '256M',
			hpc_driver	=> $args{hpc_driver},
			kill_on_error	=> 0,
			extra_args	=> [$hpc_group]
			);

		$run_id = submit_job(
			jobname		=> 'output_job_metrics',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @all_jobs, $run_id;

		# do some logging
		print "Number of jobs submitted: " . scalar(@all_jobs) . "\n";

		my $n_queued = `squeue -r | wc -l`;
		print "Total number of jobs in queue: " . $n_queued . "\n";

		# wait until it finishes
		unless ($args{no_wait}) {
			check_final_status(job_id => $run_id);
			}
		}

	# finish up
	print $log "\nProgramming terminated successfully.\n\n";
	close $log;
	}

### GETOPTS AND DEFAULT VALUES #####################################################################
# declare variables
my ($tool_config, $data_config, $output_directory);
my $hpc_driver = 'slurm';
my ($remove_junk, $dry_run, $help, $no_wait);
my $panel_of_normals = undef;

# get command line arguments
GetOptions(
	'h|help'	=> \$help,
	'd|data=s'	=> \$data_config,
	't|tool=s'	=> \$tool_config,
	'o|out_dir=s'	=> \$output_directory,
	'c|cluster=s'	=> \$hpc_driver,
	'remove'	=> \$remove_junk,
	'dry-run'	=> \$dry_run,
	'no-wait'	=> \$no_wait,
	'pon=s'		=> \$panel_of_normals
	);

if ($help) {
	my $help_msg = join("\n",
		"Options:",
		"\t--help|-h\tPrint this help message",
		"\t--data|-d\t<string> data config (yaml format)",
		"\t--tool|-t\t<string> tool config (yaml format)",
		"\t--out_dir|-o\t<string> path to output directory",
		"\t--pon\t<string> path to panel of normals (optional)",
		"\t--cluster|-c\t<string> cluster scheduler (default: slurm)",
		"\t--remove\t<boolean> should intermediates be removed? (default: false)",
		"\t--dry-run\t<boolean> should jobs be submitted? (default: false)",
		"\t--no-wait\t<boolean> should we exit after job submission (true) or wait until all jobs have completed (false)? (default: false)"
		);

	print "$help_msg\n";
	exit;
	}

# do some quick error checks to confirm valid arguments	
if (!defined($tool_config)) { die("No tool config file defined; please provide -t | --tool (ie, tool_config.yaml)"); }
if (!defined($data_config)) { die("No data config file defined; please provide -d | --data (ie, sample_config.yaml)"); }
if (!defined($output_directory)) { die("No output directory defined; please provide -o | --out_dir"); }

main(
	tool_config		=> $tool_config,
	data_config		=> $data_config,
	output_directory	=> $output_directory,
	pon			=> $panel_of_normals,
	hpc_driver		=> $hpc_driver,
	del_intermediates	=> $remove_junk,
	dry_run			=> $dry_run,
	no_wait			=> $no_wait
	);
