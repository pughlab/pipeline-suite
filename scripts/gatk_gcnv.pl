#!/usr/bin/env perl
### gatk_cnv.pl ####################################################################################
use AutoLoader 'AUTOLOAD';
use strict;
use warnings;
use version;
use Carp;
use Getopt::Std;
use Getopt::Long;
use POSIX qw(strftime);
use File::Basename;
use File::Path qw(make_path);
use YAML qw(LoadFile);
use List::Util qw(any min);
use IO::Handle;

my $cwd = dirname(__FILE__);
require "$cwd/utilities.pl";

# define some global variables
our ($reference, $dictionary, $intervals_bed, $gnomad, $min_length) = undef;

####################################################################################################
# version	author		comment
# 1.0		sprokopec	script to run GATKs gCNV caller

### USAGE ##########################################################################################
# gatk_gcnv.pl -t tool.yaml -d data.yaml -o /path/to/output/dir -c slurm --remove --dry_run
#
# where:
# 	-t (tool.yaml) contains tool versions and parameters, reference information, etc.
# 	-d (data.yaml) contains sample information (YAML file containing paths to BWA-aligned,
# 	GATK-processed BAMs, generated by gatk.pl)
# 	-o (/path/to/output/dir) indicates tool-specific output directory
# 	-c indicates hpc driver (ie, slurm)
# 	--remove indicates that intermediates will be removed
# 	--dry_run indicates that this is a dry run

### DEFINE SUBROUTINES #############################################################################
# format command to run PreprocessIntervals
sub get_format_intervals_command {
	my %args = (
		is_wgs		=> 0,
		intervals	=> undef,
		gc_out		=> undef,
		output		=> undef,
		@_
		);

	my $gatk_command;

	if (! $args{is_wgs}) {
		$gatk_command .= "\n\n" . join(' ',
			'gatk PreprocessIntervals', # by default, this adds 250bp padding to each interval
			'-L', $args{intervals},
			'-R', $reference,
			'--bin-length 0',
			'--padding 250',
			'--interval-merging-rule OVERLAPPING_ONLY',
			'-O', $args{output}
			);

		} else {

		$gatk_command .= "\n\n" . join(' ',
			'gatk PreprocessIntervals',
			'-L', $args{intervals},
			'-R', $reference,
			'--bin-length 1000',
			'--padding 0',
			'--interval-merging-rule OVERLAPPING_ONLY',
			'-O', $args{output}
			);
		}

	$gatk_command .= "\n\n" . join(' ',
		'gatk AnnotateIntervals',
		'-L', $args{output},
		'--interval-merging-rule OVERLAPPING_ONLY',
		'-R', $reference,
		'-O', $args{gc_out}
		);

	return($gatk_command);
	}

# format command to run CollectReadCounts
sub get_readcounts_command {
	my %args = (
		input		=> undef,
		intervals	=> undef,
		output		=> undef,
		@_
		);

	my $gatk_command = join(' ',
		'gatk CollectReadCounts',
		'-I', $args{input},
		'-O', $args{output},
		'-R', $reference,
		'-L', $args{intervals},
		'--interval-merging-rule OVERLAPPING_ONLY'
		);

	return($gatk_command);	
	}

# format command to run FilterIntervals
sub get_filterintervals_command {
	my %args = (
		input		=> undef,
		intervals	=> undef,
		gc		=> undef,
		output		=> undef,
		@_
		);

	my $gatk_command = join(' ',
		'gatk FilterIntervals',
		'-L', $args{intervals},
		'--annotated-intervals', $args{gc},
		'-I', $args{input},
		'-O', $args{output},
		'--interval-merging-rule OVERLAPPING_ONLY'
		);

	return($gatk_command);	
	}

# format command to run determine germline ploidy
sub get_ploidy_command {
	my %args = (
		input		=> undef,
		intervals	=> undef,
		ploidy_priors	=> undef,
		output		=> undef,
		@_
		);

	my $gatk_command = join(' ',
		'gatk DetermineGermlineContigPloidy',
		'-L', $args{intervals},
		'-I', $args{input},
		'-O', $args{output},
		'--contig-ploidy-priors', $args{ploidy_priors},
		'--output-prefix ploidy',
		'--interval-merging-rule OVERLAPPING_ONLY'
		);

	return($gatk_command);	
	}

# format command to run scatter command
sub get_scatter_command {
	my %args = (
		intervals	=> undef,
		output		=> undef,
		@_
		);

	my $gatk_command = 'LINES=$(grep -v "@" ' . $args{intervals} . ' | wc -l)';
	$gatk_command .= "\n" . 'SCATTER_COUNT=$(expr $LINES / 10)';

	$gatk_command .= "\n\n" . join(' ',
		'gatk IntervalListTools',
		'--INPUT', $args{intervals},
		'--SUBDIVISION_MODE INTERVAL_COUNT',
		'--SCATTER_CONTENT $SCATTER_COUNT',
		'--OUTPUT', $args{output}
		);

	return($gatk_command);
	}

# format command to run cohort level CNV caller
sub get_cohortCNVcaller_command {
	my %args = (
		input	=> undef,
		output	=> undef,
		gc	=> undef,
		scatter_parts	=> undef,
		scatter_dir	=> undef,
		ploidy_dir	=> undef,
		@_
		);

	my $gatk_command = 'PART=$(sed -n "$SLURM_ARRAY_TASK_ID"p ' . $args{scatter_parts} . ')';

	$gatk_command .= "\n\n" . join(' ',
		'gatk GermlineCNVCaller',
		'--run-mode COHORT',
		'-L', $args{scatter_dir} . '/temp_${PART}_of_10/scattered.interval_list',
		'--interval-merging-rule OVERLAPPING_ONLY',
		'-I', $args{input},
		'--contig-ploidy-calls', $args{ploidy_dir},
		'--annotated-intervals', $args{gc},
		'--output', $args{output},
		'--output-prefix cohort_scatter_${PART}of10'
		);

	return($gatk_command);
	}

# format command to extract/process individual CNV calls
sub get_postprocess_command {
	my %args = (
		cohort_models	=> undef,
		cohort_calls	=> undef,
		ploidy_dir	=> undef,
		output_stem	=> undef,
		index		=> undef,
		@_
		);

	my $gatk_command = join(' ',
		'gatk PostprocessGermlineCNVCalls',
		'--model-shard-path', $args{cohort_models},
		'--calls-shard-path', $args{cohort_calls},
		'--allosomal-contig chrX --allosomal-contig chrY',
		'--contig-ploidy-calls', $args{ploidy_dir},
		'--sample-index', $args{index},
		'--output-genotyped-intervals', $args{output_stem} . '_genotyped_intervals.vcf',
		'--output-genotyped-segments', $args{output_stem} . '_genotyped_segments.vcf',
		'--output-denoised-copy-ratios', $args{output_stem} . '_denoised_copy_ratios.tsv',
		'--sequence-dictionary', $dictionary
		);

	$gatk_command .= "\n\n" . join("\n",
		join(' ', 'md5sum', $args{output_stem} . '_genotyped_intervals.vcf', '>', $args{output_stem} . '_genotyped_intervals.vcf.md5'),
		join(' ', 'md5sum', $args{output_stem} . '_genotyped_segments.vcf', '>', $args{output_stem} . '_genotyped_segments.vcf.md5'),
		join(' ', 'md5sum', $args{output_stem} . '_denoised_copy_ratios.tsv', '>', $args{output_stem} . '_denoised_copy_ratios.tsv.md5')
		);

	return($gatk_command);
	}

### MAIN ###########################################################################################
sub main {
	my %args = (
		tool_config		=> undef,
		data_config		=> undef,
		output_directory	=> undef,
		hpc_driver		=> undef,
		del_intermediates	=> undef,
		dry_run			=> undef,
		no_wait			=> undef,
		@_
		);

	my $tool_config = $args{tool_config};
	my $data_config = $args{data_config};

	### PREAMBLE ######################################################################################
	unless($args{dry_run}) {
		print "Initiating GATK:gCNV pipeline...\n";
		}

	# load tool config
	my $tool_data_orig = LoadFile($tool_config);
	my $tool_data = error_checking(tool_data => $tool_data_orig, pipeline => 'gatk');
	my $date = strftime "%F", localtime;

	my $needed = version->declare('4.1')->numify;
	my $given = version->declare($tool_data->{gatk_cnv_version})->numify;

	if ($given < $needed) {
		die("Incompatible GATK version requested! GATK-CNV pipeline is currently only compatible with GATK >4.1");
		}

	# organize output and log directories
	my $output_directory = $args{output_directory};
	$output_directory =~ s/\/$//;

	my $log_directory = join('/', $output_directory, 'logs');
	unless(-e $log_directory) { make_path($log_directory); }

	my $log_file = join('/', $log_directory, 'run_GATK-gCNV_pipeline.log');

	# create a file to hold job metrics
	my (@files, $run_count, $outfile, $touch_exit_status);
	unless ($args{dry_run}) {
		# initiate a file to hold job metrics
		opendir(LOGFILES, $log_directory) or die "Cannot open $log_directory";
		@files = grep { /slurm_job_metrics/ } readdir(LOGFILES);
		$run_count = scalar(@files) + 1;
		closedir(LOGFILES);

		$outfile = $log_directory . '/slurm_job_metrics_' . $run_count . '.out';
		$touch_exit_status = system("touch $outfile");
		if (0 != $touch_exit_status) { Carp::croak("Cannot touch file $outfile"); }

		$log_file = join('/', $log_directory, 'run_GATK-gCNV_pipeline_' . $run_count . '.log');
		}

	# start logging
	open (my $log, '>', $log_file) or die "Could not open $log_file for writing.";
	$log->autoflush;

	print $log "---\n";
	print $log "Running GATKs gCNV pipeline.\n";
	print $log "\n  Tool config used: $tool_config";

	$reference = $tool_data->{reference};
	$dictionary = $reference;
	$dictionary =~ s/.fa/.dict/;
	print $log "\n    Reference used: $tool_data->{reference}";

	my $is_wgs = 0;
	if ('wgs' eq $tool_data->{seq_type}) {
		$is_wgs = 1;
		$tool_data->{intervals_bed} = undef;
		}

	if (defined($tool_data->{targets_bed})) {
		$intervals_bed = $tool_data->{targets_bed};
		print $log "\n    Target intervals: $intervals_bed";
		}

	print $log "\n    Output directory: $output_directory";
	print $log "\n  Sample config used: $data_config";
	print $log "\n---\n";

	# set tools and versions
	my $gatk	= 'gatk/' . $tool_data->{gatk_cnv_version};
	my $picard	= 'picard/' . $tool_data->{picard_version};
	my $samtools	= 'samtools/' . $tool_data->{samtools_version};
	my $r_version	= 'R/' . $tool_data->{r_version};

	# get user-specified tool parameters
	my $parameters = $tool_data->{gatk_cnv}->{parameters};

	# get optional HPC group
	my $hpc_group = defined($tool_data->{hpc_group}) ? "-A $tool_data->{hpc_group}" : undef;

	######################
	### CHECK REGIONS ####
	# read in sequence dictionary to identify smallest contig of interest
	my $string;
	if (defined($tool_data->{gatk_cnv}->{chromosomes})) {
		$string = $tool_data->{gatk_cnv}->{chromosomes};
		} elsif ( ('hg38' eq $tool_data->{ref_type}) || ('hg19' eq $tool_data->{ref_type})) {
		$string = 'chr' . join(',chr', 1..22) . ',chrX,chrY';
		} elsif ( ('GRCh37' eq $tool_data->{ref_type}) || ('GRCh37' eq $tool_data->{ref_type})) {
		$string = join(',', 1..22) . ',X,Y';
		}

	my @chroms = split(',', $string);

	open(my $dict_fh, $dictionary) or die "Could not open $dictionary\n";

	my @chr_lengths;
	while (<$dict_fh>) {
		my $line = $_;
		chomp($line);

		if ($line =~ /\@SQ/) {
			my @parts = split /\t/, $line;
			my $chr = $parts[1];
			$chr =~ s/SN://;
			next if ( !any { /$chr/ } @chroms );

			my $length = $parts[2];
			$length =~ s/LN://;
			push @chr_lengths, int($length);
			}
		}

	close($dict_fh);

	$min_length = min @chr_lengths;
	######################

	### RUN ###########################################################################################
	# begin by loading sample data
	my $smp_data = LoadFile($data_config);

	unless($args{dry_run}) {
		print "Processing " . scalar(keys %{$smp_data}) . " patients.\n";
		}

	# begin by formatting intervals for gatk
	my ($run_script, $run_id, $tmp_run_id, $intervals_run_id, $intervals_run_id2, $cleanup_cmd);
	my $should_run_final;
	my @all_jobs;

	# do an initial check for normals; no normals = don't bother running
	my @has_normals;
	foreach my $patient (sort keys %{$smp_data}) {
		my @normal_ids = keys %{$smp_data->{$patient}->{'normal'}};
		if (scalar(@normal_ids) > 0) { push @has_normals, $patient; }
		}

	if (scalar(@has_normals) < 1) {
		die("No normals provided; not checking for germline CNVs.");
		}	

	# generate processed picard-style intervals list
	my ($picard_intervals, $gatk_intervals, $gc_intervals, $format_intervals_cmd);
	my $memory = '1G';
	if (defined($intervals_bed)) {

		$picard_intervals = $intervals_bed;
		$picard_intervals =~ s/\.bed/.interval_list/;
		$gatk_intervals = join('/', $output_directory, basename($intervals_bed));
		$gatk_intervals =~ s/\.bed/.preprocessed.interval_list/;
		$gc_intervals	= $gatk_intervals;
		$gc_intervals	=~ s/\.interval_list/.gc.interval_list/;

		$format_intervals_cmd = get_format_intervals_command(
			is_wgs		=> 0,
			reference	=> $reference,
			intervals	=> $picard_intervals,
			gc_out		=> $gc_intervals,
			output		=> $gatk_intervals
			);
		
		} else {

		$gatk_intervals = join('/',
			$output_directory,
			$tool_data->{ref_type} . '.preprocessed.interval_list'
			);

		$gc_intervals = join('/',
			$output_directory,
			$tool_data->{ref_type} . '.preprocessed.gc.annotated.tsv'
			);
	
		$format_intervals_cmd = get_format_intervals_command(
			is_wgs		=> 1,
			intervals	=> join(' -L ', @chroms),
			reference	=> $reference,
			gc_out		=> $gc_intervals,
			output		=> $gatk_intervals
			);

		$memory = '4G';
		}

	# check if this should be run
	if ('Y' eq missing_file($gatk_intervals)) {

		# record command (in log directory) and then run job
		print $log "Submitting job for PreprocessIntervals...\n";

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'run_gatk_process_intervals',
			cmd	=> $format_intervals_cmd,
			modules	=> [$gatk, $picard],
			max_time	=> '02:00:00',
			mem		=> $memory,
			hpc_driver	=> $args{hpc_driver},
			extra_args	=> [$hpc_group]
			);

		$intervals_run_id = submit_job(
			jobname		=> 'run_gatk_process_intervals', 
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @all_jobs, $intervals_run_id;
		} else {
		print $log "Skipping PreprocessIntervals as this has already been completed!\n";
		}

	# return to a reasonable memory
	if ($is_wgs) {
		$memory = '4G';
		}

	# initiate objects to hold key info
	my (%final_outputs, %patient_jobs);

	# prep directories
	my $intermediate_dir = join('/', $output_directory, 'intermediate_files');
	unless(-e $intermediate_dir) { make_path($intermediate_dir); }

	my (@normal_jobs, @input_counts);

	# process each patient in $smp_data
	print $log "\nCollecting readcounts for each sample...\n\n";

	foreach my $patient (sort keys %{$smp_data}) {

		# find bams
		my @normal_ids = sort keys %{$smp_data->{$patient}->{'normal'}};

		# create some directories
		my $patient_directory = join('/', $output_directory, $patient);
		unless(-e $patient_directory) { make_path($patient_directory); }

		my $link_directory = join('/', $patient_directory, 'bam_links');
		unless(-e $link_directory) { make_path($link_directory); }

		# create some symlinks
		foreach my $normal (@normal_ids) {
			my @tmp = split /\//, $smp_data->{$patient}->{normal}->{$normal};
			my $link = join('/', $link_directory, $tmp[-1]);
			symlink($smp_data->{$patient}->{normal}->{$normal}, $link);
			}

		# create an array to hold final outputs and all patient job ids
		@patient_jobs{$patient} = [];
		@final_outputs{$patient} = [];

		# collect read counts for the normal sample(s)
		foreach my $sample (@normal_ids) {

			# if there are any samples to run, we will run the final combine job
			$should_run_final = 1;

			print $log "  SAMPLE: $sample\n";

			# run get read counts on each normal
			my $norm_readcounts = join('/', $patient_directory, $sample . '.readCounts.hdf5');
			push @input_counts, $norm_readcounts;

			my $readcounts_cmd = get_readcounts_command(
				input		=> $smp_data->{$patient}->{normal}->{$sample},
				intervals	=> $gatk_intervals,
				output		=> $norm_readcounts
				);

			# check if this should be run
			if ('Y' eq missing_file($norm_readcounts)) {

				# record command (in log directory) and then run job
				print $log "  >> Submitting job for CollectReadCounts...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_collect_read_counts_' . $sample,
					cmd	=> $readcounts_cmd,
					modules	=> [$gatk],
					dependencies	=> $intervals_run_id,
					max_time	=> $parameters->{readcounts}->{time},
					mem		=> $parameters->{readcounts}->{mem},
					hpc_driver	=> $args{hpc_driver},
					extra_args	=> [$hpc_group]
					);

				$run_id = submit_job(
					jobname		=> 'run_collect_read_counts_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @{$patient_jobs{$patient}}, $run_id;
				push @normal_jobs, $run_id;
				push @all_jobs, $run_id;
				} else {
				print $log "  >> Skipping CollectReadCounts as this has already been completed!\n";
				}
			}
		}

	# begin cohort-level functions
	print $log "\nProcessing COHORT...\n\n";

	my ($filter_run_id, $scatter_run_id, $ploidy_run_id, $cohort_run_id) = '';

	# filter intervals using GC-content and read counts
	my $filtered_intervals = join('/',
		$output_directory,
		$tool_data->{ref_type} . '.preprocessed.gc.rc.filtered.interval_list'
		);

	my $filter_intervals_cmd = get_filterintervals_command(
		input		=> join(' -I ', @input_counts),
		intervals	=> $gatk_intervals,
		gc		=> $gc_intervals,
		output		=> $filtered_intervals
		);

	# check if this should be run
	if ('Y' eq missing_file($filtered_intervals)) {

		# record command (in log directory) and then run job
		print $log ">> Submitting job for FilterIntervals...\n";

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'run_filter_intervals',
			cmd	=> $filter_intervals_cmd,
			modules	=> [$gatk],
			dependencies	=> join(':', @normal_jobs),
			max_time	=> '02:00:00', #$parameters->{create_pon}->{time},
			mem		=> '4G', #$parameters->{create_pon}->{mem},
			hpc_driver	=> $args{hpc_driver},
			extra_args	=> [$hpc_group]
			);

		$filter_run_id = submit_job(
			jobname		=> 'run_filter_intervals',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @all_jobs, $filter_run_id;
		} else {
		print $log ">> Skipping FilterIntervals as this has already been completed!\n";
		}

	# scatter intervals
	my $scatter_dir = join('/', $intermediate_dir, 'scatter');
	unless(-e $scatter_dir) { make_path($scatter_dir); }
	my $scatter_parts = join('/', $intermediate_dir, 'scatter_parts.txt');

	if ('Y' eq missing_file($scatter_parts)) {

		open(my $fh, '>', $scatter_parts) or die "Cannot open '$scatter_parts' !";

		foreach my $part ('0001','0002','0003','0004','0005','0006','0007','0008','0009','0010') {
			print $fh "$part\n";
			}

		close $fh;
		}

	my $scatter_cmd = get_scatter_command(
		intervals	=> $gatk_intervals,
		output		=> $scatter_dir
		);

	my $scatter_complete = join('/', $intermediate_dir, 'scatterIntervals.COMPLETE');

	$scatter_cmd .= "\n\n" . "echo 'scatter intervals COMPLETE' > " . $scatter_complete;

	# check if this should be run
	if ('Y' eq missing_file($scatter_complete)) {

		# record command (in log directory) and then run job
		print $log ">> Submitting job for ScatterIntervals...\n";

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'run_scatter_intervals',
			cmd	=> $scatter_cmd,
			modules	=> [$gatk],
			dependencies	=> $filter_run_id,
			max_time	=> '02:00:00',
			mem		=> '4G',
			hpc_driver	=> $args{hpc_driver},
			extra_args	=> [$hpc_group]
			);

		$scatter_run_id = submit_job(
			jobname		=> 'run_scatter_intervals',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @all_jobs, $scatter_run_id;
		} else {
		print $log ">> Skipping ScatterIntervals as this has already been completed!\n";
		}

	# set up ploidy priors and determine germline ploidy estimates
	my $ploidy_priors = join('/', $intermediate_dir, 'contig_ploidy_priors.tsv');
	if ('Y' eq missing_file($ploidy_priors)) {

		open(my $fh, '>', $ploidy_priors) or die "Cannot open '$ploidy_priors' !";

		print $fh "CONTIG_NAME\tPLOIDY_PRIOR_0\tPLOIDY_PRIOR_1\tPLOIDY_PRIOR_2\tPLOIDY_PRIOR_3\tPLOIDY_PRIOR_4\n";

		foreach my $contig (@chroms) {
			if ($contig =~ m/X/) {
				print $fh "$contig\t0.01\t0.49\t0.49\t0.01\t0.00\n";
				} elsif ($contig =~ m/Y/) {
				print $fh "$contig\t0.50\t0.50\t0.00\t0.00\t0.00\n";
				} else {
				print $fh "$contig\t0.01\t0.01\t0.96\t0.01\t0.01\n";
				}
			}

		close $fh;
		}

	my $ploidy_complete = join('/', $intermediate_dir, 'cohortPloidy.COMPLETE');

	my $ploidy_cmd = get_ploidy_command(
		input		=> join(' -I ', @input_counts),
		intervals	=> $filtered_intervals,
		ploidy_priors	=> $ploidy_priors,
		output		=> $intermediate_dir
		);

	$ploidy_cmd .= "\n\n" . "echo 'determine cohort ploidy COMPLETE' > " . $ploidy_complete;

	# check if this should be run
	if ('Y' eq missing_file($ploidy_complete)) {

		# record command (in log directory) and then run job
		print $log ">> Submitting job for DetermineGermlineContigPloidy...\n";

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'run_determine_germline_contig_ploidy',
			cmd	=> $ploidy_cmd,
			modules	=> [$gatk],
			dependencies	=> $filter_run_id,
			max_time	=> '24:00:00',
			mem		=> '4G',
			hpc_driver	=> $args{hpc_driver},
			extra_args	=> [$hpc_group]
			);

		$ploidy_run_id = submit_job(
			jobname		=> 'run_determine_germline_contig_ploidy',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @all_jobs, $ploidy_run_id;
		} else {
		print $log ">> Skipping DetermineGermlineContigPloidy as this has already been completed!\n";
		}

	# for each scatter, run cohort-germlineCNVcaller
	my $cohort_dir = join('/', $intermediate_dir, 'cohort');

	my $cohort_cmd = get_cohortCNVcaller_command(
		input		=> join(' -I ', @input_counts),
		output		=> $cohort_dir,
		gc		=> $gc_intervals,
		scatter_parts	=> $scatter_parts,
		scatter_dir	=> $scatter_dir,
		ploidy_dir	=> join('/', $intermediate_dir, 'ploidy-calls')
		);

	my $cohort_complete = join('/', $intermediate_dir, 'cohort_gCNV.COMPLETE');
	my $check_cohort_cmd = "echo 'cohort call gCNV step COMPLETE' > $cohort_complete";

	# check if this should be run
	if ('Y' eq missing_file($cohort_complete)) {

		# record command (in log directory) and then run job
		print $log ">> Submitting job for GermlineCNVCaller...\n";

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'run_cohort_germline_cnv_caller',
			cmd	=> $cohort_cmd,
			modules	=> [$gatk],
			dependencies	=> join(':', $filter_run_id, $scatter_run_id, $ploidy_run_id),
			max_time	=> '24:00:00', #$parameters->{create_pon}->{time},
			mem		=> '28G', #$parameters->{create_pon}->{mem},
			hpc_driver	=> $args{hpc_driver},
			extra_args	=> [$hpc_group, '--array=1-10']
			);

		$cohort_run_id = submit_job(
			jobname		=> 'run_cohort_germline_cnv_caller',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @all_jobs, $cohort_run_id;

		# check to see if all the array jobs finished successfully
		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'run_check_cohort_germline_cnv_caller',
			cmd	=> $check_cohort_cmd,
			modules	=> [$gatk],
			dependencies	=> $cohort_run_id, 
			hpc_driver	=> $args{hpc_driver},
			extra_args	=> [$hpc_group]
			);

		$cohort_run_id = submit_job(
			jobname		=> 'run_check_cohort_germline_cnv_caller',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @all_jobs, $cohort_run_id;
		} else {
		print $log ">> Skipping GermlineCNVCaller as this has already been completed!\n";
		}

	# end cohort-level functions
	print $log "Finished COHORT functions.\n";

	# organize cohort outputs
	my @cohort_models;
	my @cohort_calls;

	foreach my $part ('0001','0002','0003','0004','0005','0006','0007','0008','0009','0010') {
		push @cohort_models, $cohort_dir . '/cohort_scatter_' . $part . 'of10-model';
		push @cohort_calls, $cohort_dir . '/cohort_scatter_' . $part . 'of10-calls';
		}

	# begin case-level functions
	print $log "\nExtracting germline-CNVs for each sample...\n\n";

	my $smp_index = 0;

	# process each patient in $smp_data
	foreach my $patient (sort keys %{$smp_data}) {

		# find bams
		my @normal_ids = sort keys %{$smp_data->{$patient}->{'normal'}};

		# create some directories
		my $patient_directory = join('/', $output_directory, $patient);

		# collect read counts for the normal sample(s)
		foreach my $sample (@normal_ids) {

			print $log "  SAMPLE: $sample\n\n";

			# run postprocess gCNV calls for each sample
			my $smp_output_stem = join('/', $patient_directory, $sample);
			my $genotyped_intervals = $smp_output_stem . '_genotyped_intervals.vcf';
			my $genotyped_segments = $smp_output_stem . '_genotyped_segments.vcf';
			my $denoised_copy_ratios =  $smp_output_stem . '_denoised_copy_ratios.tsv';

			my $postprocess_cmd = get_postprocess_command(
				cohort_models	=> join(' --model-shard-path ', @cohort_models),
				cohort_calls	=> join(' --calls-shard-path ', @cohort_calls),
				ploidy_dir	=> join('/', $intermediate_dir, 'ploidy-calls'),
				output_stem	=> $smp_output_stem,
				index		=> $smp_index
				);

			$smp_index++;

			# check if this should be run
			if ('Y' eq missing_file("$denoised_copy_ratios.md5")) {

				# record command (in log directory) and then run job
				print $log "  >> Submitting job for PostprocessGermlineCNVCalls...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_postprocess_gCNV_calls_' . $sample,
					cmd	=> $postprocess_cmd,
					modules	=> [$gatk],
					dependencies	=> $cohort_run_id,
					max_time	=> $parameters->{postprocess}->{time},
					mem		=> $parameters->{postprocess}->{mem},
					hpc_driver	=> $args{hpc_driver},
					extra_args	=> [$hpc_group]
					);

				$run_id = submit_job(
					jobname		=> 'run_postprocess_gCNV_calls_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @{$patient_jobs{$patient}}, $run_id;
				} else {
				print $log "  >> Skipping PostprocessGermlineCNVCalls as this has already been completed!\n";
				}

			$genotyped_intervals = $smp_output_stem . '_genotyped_intervals.vcf';
			$genotyped_segments = $smp_output_stem . '_genotyped_segments.vcf';
			$denoised_copy_ratios =  $smp_output_stem . '_denoised_copy_ratios.tsv';

			push @{$final_outputs{$patient}}, $genotyped_intervals;
			push @{$final_outputs{$patient}}, $genotyped_segments;
			push @{$final_outputs{$patient}}, $denoised_copy_ratios;	
			}
		}

	# collate results
	if ($should_run_final) {

		my $collect_output = join(' ',
			"Rscript $cwd/collect_gatk_cnv_output.R",
			'-d', $output_directory,
			'-p', $tool_data->{project_name},
			'-r', $tool_data->{ref_type},
			'--germline'
			);

		if (defined($intervals_bed)) {
			$collect_output .= " -t $picard_intervals";
			}

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'combine_gatk_cnv_output',
			cmd	=> $collect_output,
			modules	=> ['R/4.1.0'],
			dependencies	=> join(':', @all_jobs),
			mem		=> '4G',
			max_time	=> '12:00:00',
			hpc_driver	=> $args{hpc_driver},
			extra_args	=> [$hpc_group]
			);

		$run_id = submit_job(
			jobname		=> 'combine_gatk_cnv_output',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @all_jobs, $run_id;
		}

	# if this is not a dry run OR there are jobs to assess (run or resumed with jobs submitted) then
	# collect job metrics (exit status, mem, run time)
	unless ( ($args{dry_run}) || (scalar(@all_jobs) == 0) ) {

		# collect job stats
		my $collect_metrics = collect_job_stats(
			job_ids		=> join(',', @all_jobs),
			outfile		=> $outfile,
			hpc_driver	=> $args{hpc_driver}
			);

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'output_job_metrics_' . $run_count,
			cmd	=> $collect_metrics,
			dependencies	=> join(':', @all_jobs),
			mem		=> '256M',
			hpc_driver	=> $args{hpc_driver},
			kill_on_error	=> 0,
			extra_args	=> [$hpc_group]
			);

		$run_id = submit_job(
			jobname		=> 'output_job_metrics',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @all_jobs, $run_id;

		# do some logging
		print "Number of jobs submitted: " . scalar(@all_jobs) . "\n";

		my $n_queued = `squeue -r | wc -l`;
		print "Total number of jobs in queue: " . $n_queued . "\n";

		# wait until it finishes
		unless ($args{no_wait}) {
			check_final_status(job_id => $run_id);
			}
		}

	# finish up
	print $log "\nProgramming terminated successfully.\n\n";
	close $log;
	}

### GETOPTS AND DEFAULT VALUES #####################################################################
# declare variables
my ($tool_config, $data_config, $output_directory);
my $hpc_driver = 'slurm';
my ($remove_junk, $dry_run, $no_wait, $help);

# get command line arguments
GetOptions(
	'h|help'	=> \$help,
	'd|data=s'	=> \$data_config,
	't|tool=s'	=> \$tool_config,
	'o|out_dir=s'	=> \$output_directory,
	'c|cluster=s'	=> \$hpc_driver,
	'remove'	=> \$remove_junk,
	'dry-run'	=> \$dry_run,
	'no-wait'	=> \$no_wait
	);

if ($help) {
	my $help_msg = join("\n",
		"Options:",
		"\t--help|-h\tPrint this help message",
		"\t--data|-d\t<string> data config (yaml format)",
		"\t--tool|-t\t<string> tool config (yaml format)",
		"\t--out_dir|-o\t<string> path to output directory",
		"\t--cluster|-c\t<string> cluster scheduler (default: slurm)",
		"\t--remove\t<boolean> should intermediates be removed? (default: false)",
		"\t--dry-run\t<boolean> should jobs be submitted? (default: false)",
		"\t--no-wait\t<boolean> should we exit after job submission (true) or wait until all jobs have completed (false)? (default: false)"
		);

	print "$help_msg\n";
	exit;
	}

# do some quick error checks to confirm valid arguments	
if (!defined($tool_config)) { die("No tool config file defined; please provide -t | --tool (ie, tool_config.yaml)"); }
if (!defined($data_config)) { die("No data config file defined; please provide -d | --data (ie, sample_config.yaml)"); }
if (!defined($output_directory)) { die("No output directory defined; please provide -o | --out_dir"); }

main(
	tool_config		=> $tool_config,
	data_config		=> $data_config,
	output_directory	=> $output_directory,
	hpc_driver		=> $hpc_driver,
	del_intermediates	=> $remove_junk,
	dry_run			=> $dry_run,
	no_wait			=> $no_wait
	);
