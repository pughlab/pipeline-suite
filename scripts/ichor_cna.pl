#!/usr/bin/env perl
### ichor_cna.pl ###################################################################################
use AutoLoader 'AUTOLOAD';
use strict;
use warnings;
use version;
use Carp;
use Getopt::Std;
use Getopt::Long;
use POSIX qw(strftime);
use File::Basename;
use File::Path qw(make_path);
use YAML qw(LoadFile);
use List::Util qw(any sum);
use IO::Handle;

my $cwd = dirname(__FILE__);
require "$cwd/utilities.pl";

our ($reference, $ref_type, $pon, $ichor_path);

####################################################################################################
# version	author		comment
# 1.0		sprokopec	script to run ichorCNA

### USAGE ##########################################################################################
# ichor_cna.pl -t tool.yaml -d data.yaml -o /path/to/output/dir -c slurm --remove --dry_run
#
# where:
# 	-t (tool.yaml) contains tool versions and parameters, reference information, etc.
# 	-d (data.yaml) contains sample information (YAML file containing paths to BWA-aligned,
# 	GATK-processed BAMs, generated by gatk.pl)
# 	-o (/path/to/output/dir) indicates tool-specific output directory
# 	-c indicates hpc driver (ie, slurm)
# 	--remove indicates that intermediates will be removed
# 	--dry_run indicates that this is a dry run

### DEFINE SUBROUTINES #############################################################################
# run downsample bam
sub create_downsample_command {
	my %args = (
		bam	=> undef,
		id	=> undef,
		n_reads	=> undef,
		factor	=> undef,
		outdir	=> undef,
		tmpdir	=> undef,
		@_
		);

	my $downsample_command;

	if (defined($args{n_reads})) {

		$downsample_command = join("\n",
			"N_READS=" . $args{n_reads},
			"TOTAL_READS=\$(samtools view -c $args{bam})",
			"SCALE_FACTOR=\$(printf '%.4f\\n' \$(echo \"\$N_READS/\$TOTAL_READS\" | bc -l))"
			);

		} elsif (defined($args{factor})) {

		$downsample_command = join("\n",
			"SCALE_FACTOR=$args{factor}",
			"TOTAL_READS=\$(samtools view -c $args{bam})",
			"N_READS=\$(printf '%.0f\\n' \$(echo \"\$SCALE_FACTOR*\$TOTAL_READS\" | bc -l))"
			);
		}

	$downsample_command .= "\n" . join("\n",
		'echo "downsampling to $N_READS from $TOTAL_READS (scale factor = $SCALE_FACTOR)"' . "\n",
		'if (( $(echo "$SCALE_FACTOR < 1" | bc -l) )); then'
		);

	$downsample_command .= "\n  " . join(' ',  
		'java -Xmx1g',
		'-Djava.io.tmpdir=' . $args{tmpdir},
		'-jar $picard_dir/picard.jar DownsampleSam',
		'I=' . $args{bam},
		'O=' . $args{outdir} . '/' . $args{id} . '_downsampled.bam',
		'P=$SCALE_FACTOR',
		'VALIDATION_STRINGENCY=LENIENT;'
		);

	$downsample_command .= "\nelse\n  " . join(' ',
		'ln -s',
		$args{bam},
		$args{outdir} . '/' . $args{id} . '_downsampled.bam;'
		);

	$downsample_command .= "\nfi";

	$downsample_command .= "\n" . join(' ',
		'samtools index',
		'-o', $args{outdir} . '/' . $args{id} . '_downsampled.bam.bai',
		$args{outdir} . '/' . $args{id} . '_downsampled.bam;'
		);

	return($downsample_command);
	}

# format command to get read counts
sub get_readcount_command {
	my %args = (
		bam	=> undef,
		chroms	=> undef,
		wig	=> undef,
		@_
		);

	my $rc_command = join(' ',
		'readCounter',
		'--window 1000000',
		'--quality 20',
		'--chromosome "' . $args{chroms} . '"',
		$args{bam},
		'>', $args{wig}
		);

	return($rc_command);
	}

# format command to run ichorCNA
sub get_ichor_cna_command {
	my %args = (
		tumour_id	=> undef,
		tumour_wig	=> undef,
		normal_wig	=> undef,
		chroms		=> undef,
		out_dir		=> undef,
		pon		=> undef,
		intervals	=> undef,
		create_pon	=> 'N',
		normal_list	=> undef,
		@_
		);

	my $ichor_command = "cd $args{out_dir}";

	if ('Y' eq $args{create_pon}) {

		$ichor_command .= "\n\n". join(' ',
			'Rscript', $ichor_path,
			'--make_pon',
			'--normal_list', $args{normal_list}
			);

		} else {

		$ichor_command .= "\n\n". join(' ',
			'Rscript', $ichor_path,
			'--WIG', $args{tumour_wig},
			'--id', $args{tumour_id}
			);
		}

#	$ichor_command .= '--chrs "c(' . "'" . $args{chroms} . "'" . ')"';

	if ( ('hg38' eq $ref_type) || ('hg19' eq $ref_type) ) {
		$ichor_command .= " --genomeStyle UCSC";
		$ichor_command .= " --genomeBuild $ref_type";
		} else {
		$ichor_command .= " --genomeStyle NCBI";
		if ('GRCh37' eq $ref_type) {
			$ichor_command .= " --genomeBuild hg19";
			} elsif ('GRCh38' eq $ref_type) {
			$ichor_command .= " --genomeBuild hg38";
			}
		}

	if (defined($args{normal_wig})) {
		$ichor_command .= " --NORMWIG $args{normal_wig}";
		}

	if (defined($args{pon})) {
		$ichor_command .= " --normalPanel $args{pon}";
		}

	if (defined($args{intervals})) {
		$ichor_command .= " --target_bed $args{intervals}";
		}

	return($ichor_command);
	}

### MAIN ###########################################################################################
sub main {
	my %args = (
		tool_config		=> undef,
		data_config		=> undef,
		output_directory	=> undef,
		hpc_driver		=> undef,
		del_intermediates	=> undef,
		dry_run			=> undef,
		no_wait			=> undef,
		@_
		);

	my $tool_config = $args{tool_config};
	my $data_config = $args{data_config};

	### PREAMBLE ######################################################################################
	unless($args{dry_run}) {
		print "Initiating ichorCNA pipeline...\n";
		}

	# load tool config
	my $tool_data_orig = LoadFile($tool_config);
	my $tool_data = error_checking(tool_data => $tool_data_orig, pipeline => 'ichor');
	my $date = strftime "%F", localtime;

	# organize output and log directories
	my $output_directory = $args{output_directory};
	$output_directory =~ s/\/$//;

	my $log_directory = join('/', $output_directory, 'logs');
	unless(-e $log_directory) { make_path($log_directory); }

	my $log_file = join('/', $log_directory, 'run_ICHORCNA_pipeline.log');

	# create a file to hold job metrics
	my (@files, $run_count, $outfile, $touch_exit_status);
	unless ($args{dry_run}) {
		# initiate a file to hold job metrics
		opendir(LOGFILES, $log_directory) or die "Cannot open $log_directory";
		@files = grep { /slurm_job_metrics/ } readdir(LOGFILES);
		$run_count = scalar(@files) + 1;
		closedir(LOGFILES);

		$outfile = $log_directory . '/slurm_job_metrics_' . $run_count . '.out';
		$touch_exit_status = system("touch $outfile");
		if (0 != $touch_exit_status) { Carp::croak("Cannot touch file $outfile"); }

		$log_file = join('/', $log_directory, 'run_ICHORCNA_pipeline_' . $run_count . '.log');
		}

	# start logging
	open (my $log, '>', $log_file) or die "Could not open $log_file for writing.";
	$log->autoflush;

	print $log "---\n";
	print $log "Running ichorCNA pipeline.\n";
	print $log "\n  Tool config used: $tool_config";
	print $log "\n    Reference used: $tool_data->{reference}";

	$reference = $tool_data->{reference};
	$ref_type  = $tool_data->{ref_type};

	if (defined($tool_data->{targets_bed})) {
		print $log "\n    Target intervals: $tool_data->{targets_bed}";
		}

	print $log "\n    Output directory: $output_directory";
	print $log "\n  Sample config used: $data_config";
	print $log "\n---\n";

	my $string;
	if (defined($tool_data->{ichor_cna}->{chromosomes})) {
		$string = $tool_data->{ichor_cna}->{chromosomes};
		} elsif ( ('hg38' eq $tool_data->{ref_type}) || ('hg19' eq $tool_data->{ref_type})) {
		$string = 'chr' . join(',chr', 1..22) . ',chrX,chrY';
		} elsif ( ('GRCh37' eq $tool_data->{ref_type}) || ('GRCh37' eq $tool_data->{ref_type})) {
		$string = join(',', 1..22) . ',X,Y';
		} else {
		$string = 'ALL';
		}

	my @chroms = split(',', $string);

	# set tools and versions
	$ichor_path = "$cwd/runIchorCNA.R";
	my $ichor_r;
	my $given = $tool_data->{ichor_cna_version}; # version->declare($tool_data->{ichor_cna_version})->numify;
	if ('0.3.2' eq $given) {
		$ichor_r = 'R/4.1.0'; # will run 0.3.2
		} elsif ('0.3.0' eq $given) {
		$ichor_r = 'R/3.6.1'; # will run version 0.3.0
		} else {
		print $log "Unknown verions of ichorCNA requested - using v3.2.0 in R/4.1.0";
		$ichor_r = 'R/4.1.0'; # will run 0.3.2
		}

	my $hmmcopy	= 'hmmcopy_utils/170718';
	my $picard	= 'picard/' . $tool_data->{picard_version};
	my $samtools	= 'samtools/' . $tool_data->{samtools_version};
	my $r_version	= 'R/'. $tool_data->{r_version};

	# get user-specified tool parameters
	my $parameters = $tool_data->{ichor_cna}->{parameters};

	# get optional HPC group
	my $hpc_group = defined($tool_data->{hpc_group}) ? "-A $tool_data->{hpc_group}" : undef;

	### RUN ###########################################################################################
	my ($run_script, $run_id, $link, $should_run_final, $should_run_pon, $should_downsample);
	my (@all_jobs, @pon_jobs, @normal_wigs);
	my (%final_outputs, %normal_jobs, %patient_jobs, %cleanup);

	# get sample data
	my $smp_data = LoadFile($data_config);

	unless($args{dry_run}) {
		print "Processing " . scalar(keys %{$smp_data}) . " patients.\n";
		}

	my @normal_samples;
	foreach my $patient (sort keys %{$smp_data}) {
		my @normal_ids = keys %{$smp_data->{$patient}->{'normal'}};
		push @normal_samples, @normal_ids;
		}

	my @tumour_samples;
	foreach my $patient (sort keys %{$smp_data}) {
		my @tumour_ids = keys %{$smp_data->{$patient}->{'tumour'}};
		push @tumour_samples, @tumour_ids;
		}

	if (scalar(@tumour_samples) > 0) { $should_run_final = 1; }

	# are there any normals available to make a PoN?
	my $pon_directory = join('/', $output_directory, 'PanelOfNormals');

	if ( ('Y' eq $parameters->{create_pon}->{run}) && (scalar(@normal_samples) > 1) ) {
		$should_run_pon = 1;
		unless(-e $pon_directory) { make_path($pon_directory); }
		$pon = join($pon_directory, $date . "_" . $ref_type . "_panelOfNormals_median.rds");
		} elsif ( ('Y' eq $parameters->{create_pon}->{run}) && (defined($tool_data->{ichor_cna}->{pon})) ) {
		$pon = $tool_data->{ichor_cna}->{pon};
		print $log "Insufficient normals provided to create a Panel of Normals; using $pon instead.\n";
		} elsif (defined($tool_data->{ichor_cna}->{pon})) {
		$pon = $tool_data->{ichor_cna}->{pon};
		print $log "Panel of Normals: $tool_data->{ichor_cna}->{pon}";
		} else {
		print $log "No Panel of Normals defined; will use default provided by IchorCNA.\n";
		}

	# should we be downsampling our bams?
	my ($n_reads, $scale_factor);
	if ('Y' eq $parameters->{downsample}->{run}) {
		$should_downsample = 1;

		if (defined($parameters->{downsample}->{n_reads})) {
			$n_reads = $parameters->{downsample}->{n_reads};
			} elsif (defined($parameters->{downsample}->{scale_factor})) {
			$scale_factor = $parameters->{downsample}->{scale_factor};
			} else {
			$n_reads = 50000000;
			print "\nNo scaling parameters defined for downsampling; will default to 50M reads. Alternatively, you can specifiy these (number of reads (n_reads) or scaling factor (scale_factor)) in your tool config.";
			}
		}

	# process each sample in $smp_data
	foreach my $patient (sort keys %{$smp_data}) {

		print $log "\nInitiating process for PATIENT: $patient";

		# find bams
		my @normal_ids = keys %{$smp_data->{$patient}->{'normal'}};
		my @tumour_ids = keys %{$smp_data->{$patient}->{'tumour'}};

		# create some directories
		my $patient_directory = join('/', $output_directory, $patient);
		unless(-e $patient_directory) { make_path($patient_directory); }

		my $tmp_directory = join('/', $patient_directory, 'TEMP');
		unless(-e $tmp_directory) { make_path($tmp_directory); }

		my $link_directory = join('/', $patient_directory, 'bam_links');
		unless(-e $link_directory) { make_path($link_directory); }

		# create an array to hold final outputs and all patient job ids
		$run_id = '';
		@normal_jobs{$patient} = [];
		@patient_jobs{$patient} = [];
		@final_outputs{$patient} = [];
		$cleanup{$patient} = "rm -rf $tmp_directory";

		# if a normal is provided, create a WIG
		next if (scalar(@normal_ids) == 0);
		my $normal = $normal_ids[0];
		print $log "\n  NORMAL: $normal\n";

		# find input bam
		# because readCounter needs an index with the suffix .bam.bai (rather
		# than the .bai I have generated, we need to use the renamed symlinks
		# for this step)
		my $normal_bam = basename($smp_data->{$patient}->{normal}->{$normal});

		# downsample if requested
		unless ($should_downsample) {

			my $bam = $smp_data->{$patient}->{normal}->{$normal};
			my $index = $bam;
			$index =~ s/bam$/bai/;

			$link = join('/', $link_directory, basename($bam));
			symlink($bam, $link);
			symlink($index, $link . '.bai');	
			$normal_bam = $link;

			} else {

			my $downsample_cmd = create_downsample_command(
				bam	=> $smp_data->{$patient}->{normal}->{$normal},
				id	=> $normal,
				n_reads => defined($n_reads) ? $n_reads : undef,
				factor  => defined($scale_factor) ? $scale_factor : undef,
				outdir	=> $tmp_directory,
				tmpdir	=> $tmp_directory
				);

			$normal_bam = join('/',
				$tmp_directory,
				$normal . '_downsampled.bam'
				);

			# check if this should be run
			if ('Y' eq missing_file("$normal_bam.bai")) {

				# record command (in log directory) and then run job
				print $log "  >> Submitting job for DownsampleBAM...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_downsample_bam_' . $normal,
					cmd	=> $downsample_cmd,
					modules	=> [$picard, $samtools],
					max_time	=> $parameters->{downsample}->{time},
					mem		=> $parameters->{downsample}->{mem},
					hpc_driver	=> $args{hpc_driver},
					extra_args	=> [$hpc_group]
					);

				$run_id = submit_job(
					jobname		=> 'run_downsample_bam_' . $normal,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @{$normal_jobs{$patient}}, $run_id;
				push @{$patient_jobs{$patient}}, $run_id;
				push @pon_jobs, $run_id;
				push @all_jobs, $run_id;
				} else {
				print $log "  >> Skipping DownsampleBAM because this has already been completed!\n";
				}
			}

		# generate command to collect readcounts
		my $normal_wig = join('/', $tmp_directory, $normal . '.wig');

		my $make_wig_command = get_readcount_command(
			chroms	=> join(',', @chroms),
			bam	=> $normal_bam,
			wig	=> $normal_wig
			);

		push @normal_wigs, $normal_wig;

		# check if this should be run
		if ('Y' eq missing_file($normal_wig)) {

			# record command (in log directory) and then run job
			print $log "  >> Submitting job for readCounter...\n";

			$run_script = write_script(
				log_dir	=> $log_directory,
				name	=> 'run_readCounter_' . $normal,
				cmd	=> $make_wig_command,
				modules	=> [$hmmcopy],
				dependencies	=> $run_id,
				max_time	=> $parameters->{readcounter}->{time},
				mem		=> $parameters->{readcounter}->{mem},
				hpc_driver	=> $args{hpc_driver},
				extra_args	=> [$hpc_group]
				);

			$run_id = submit_job(
				jobname		=> 'run_readCounter_' . $normal,
				shell_command	=> $run_script,
				hpc_driver	=> $args{hpc_driver},
				dry_run		=> $args{dry_run},
				log_file	=> $log
				);

			push @{$normal_jobs{$patient}}, $run_id;
			push @pon_jobs, $run_id;
			push @all_jobs, $run_id;
			} else {
			print $log "  >> Skipping readCounter because this has already been completed!\n";
			}
		}

	# create a panel of normals
	my $pon_job_id = '';

	if ($should_run_pon) {

		my $sample_sheet = join('/', $pon_directory, 'normal_wig_files.txt');
		open(my $fh, '>', $sample_sheet) or die "Cannot open '$sample_sheet' !";

		foreach my $wig (@normal_wigs) {
			print $fh "$wig\n";
			}

		# run IchorCNA on provided WIG files
		my $pon_command = get_ichor_cna_command(
			out_dir		=> $pon_directory,
			pon		=> $pon,
			intervals	=> $tool_data->{targets_bed},
			create_pon	=> 'Y',
			normal_list	=> $sample_sheet
			);
		
		# check if this should be run
		if ('Y' eq missing_file($pon)) {

			# record command (in log directory) and then run job
			print $log ">> Submitting job to create Panel of Normals...\n";

			$run_script = write_script(
				log_dir	=> $log_directory,
				name	=> 'run_ichor_cna__create_pon',
				cmd	=> $pon_command,
				modules	=> [$ichor_r],
				dependencies	=> join(':', @pon_jobs),
				max_time	=> $parameters->{create_pon}->{time},
				mem		=> $parameters->{create_pon}->{mem},
				hpc_driver	=> $args{hpc_driver},
				extra_args	=> [$hpc_group]
				);

			$pon_job_id = submit_job(
				jobname		=> 'run_ichor_cna__create_pon',
				shell_command	=> $run_script,
				hpc_driver	=> $args{hpc_driver},
				dry_run		=> $args{dry_run},
				log_file	=> $log
				);

			push @all_jobs, $pon_job_id;
			} else {
			print $log ">> Skipping CreatePoN step because this has already been completed!\n";
			}
		}

	# continue processing each sample in $smp_data
	foreach my $patient (sort keys %{$smp_data}) {

		# find sample ids
		my @normal_ids = keys %{$smp_data->{$patient}->{'normal'}};
		my @tumour_ids = keys %{$smp_data->{$patient}->{'tumour'}};

		# create some directories
		my $patient_directory = join('/', $output_directory, $patient);
		my $link_directory = join('/', $patient_directory, 'bam_links');
		my $tmp_directory = join('/', $patient_directory, 'TEMP');

		# indicate normal to use
		my $normal_wig;
		if (scalar(@normal_ids) > 0) {
			$normal_wig = join('/', $tmp_directory, $normal_ids[0] . '.wig');
			}

		# for each tumour sample
		foreach my $sample (@tumour_ids) {

			print $log "\n  TUMOUR: $sample\n";

			my $sample_directory = join('/', $patient_directory, $sample);
			unless(-e $sample_directory) { make_path($sample_directory); }

			# find input bam
			# because readCounter needs an index with the suffix .bam.bai (rather
			# than the .bai I have generated, we need to use the renamed symlinks
			# for this step)
			my $input_bam = basename($smp_data->{$patient}->{tumour}->{$sample});

			# downsample if requested
			$run_id = '';
			unless ($should_downsample) {

				my $bam = $smp_data->{$patient}->{tumour}->{$sample};
				my $index = $bam;
				$index =~ s/bam$/bai/;

				$link = join('/', $link_directory, basename($bam));
				symlink($bam, $link);
				symlink($index, $link . '.bai');
				$input_bam = $link;

				} else {

				my $downsample_cmd = create_downsample_command(
					bam	=> $smp_data->{$patient}->{tumour}->{$sample},
					id	=> $sample,
					n_reads => defined($n_reads) ? $n_reads : undef,
					factor  => defined($scale_factor) ? $scale_factor : undef,
					outdir	=> $tmp_directory,
					tmpdir	=> $tmp_directory
					);

				$input_bam = join('/',
					$tmp_directory,
					$sample . '_downsampled.bam'
					);

				# check if this should be run
				if ('Y' eq missing_file("$input_bam.bai")) {

					# record command (in log directory) and then run job
					print $log "  >> Submitting job for DownsampleBAM...\n";

					$run_script = write_script(
						log_dir	=> $log_directory,
						name	=> 'run_downsample_bam_' . $sample,
						cmd	=> $downsample_cmd,
						modules	=> [$picard, $samtools],
						max_time	=> $parameters->{downsample}->{time},
						mem		=> $parameters->{downsample}->{mem},
						hpc_driver	=> $args{hpc_driver},
						extra_args	=> [$hpc_group]
						);

					$run_id = submit_job(
						jobname		=> 'run_downsample_bam_' . $sample,
						shell_command	=> $run_script,
						hpc_driver	=> $args{hpc_driver},
						dry_run		=> $args{dry_run},
						log_file	=> $log
						);

					push @{$patient_jobs{$patient}}, $run_id;
					push @all_jobs, $run_id;
					} else {
					print $log "  >> Skipping DownsampleBAM because this has already been completed!\n";
					}
				}

			# indicate output stem
			my $tumour_wig = join('/', $tmp_directory, $sample . '.wig');

			# create readCounter command
			my $make_wig_command = get_readcount_command(
				chroms	=> join(',', @chroms),
				bam	=> $input_bam,
				wig	=> $tumour_wig
				);

			# check if this should be run
			if ('Y' eq missing_file($tumour_wig)) {

				# record command (in log directory) and then run job
				print $log "  >> Submitting job for readCounter...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_readCounter_' . $sample,
					cmd	=> $make_wig_command,
					modules	=> [$hmmcopy],
					dependencies	=> $run_id,
					max_time	=> $parameters->{readcounter}->{time},
					mem		=> $parameters->{readcounter}->{mem},
					hpc_driver	=> $args{hpc_driver},
					extra_args	=> [$hpc_group]
					);

				$run_id = submit_job(
					jobname		=> 'run_readCounter_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @{$patient_jobs{$patient}}, $run_id;
				push @all_jobs, $run_id;
				} else {
				print $log "  >> Skipping readCounter because this has already been completed!\n";
				}

			# indicate final IchorCNA output file
			my $final_file = join('/', $sample_directory, $sample . '_final_metrics.txt');

			# run IchorCNA on provided WIG files
			my $ichor_command = get_ichor_cna_command(
				tumour_id	=> $sample,
				tumour_wig	=> $tumour_wig,
				normal_wig	=> $normal_wig,
				chroms		=> join("','", @chroms),
				out_dir		=> $sample_directory,
				pon		=> $pon,
				intervals	=> $tool_data->{targets_bed}
				);

			# check if this should be run
			if ('Y' eq missing_file($final_file)) {

				# record command (in log directory) and then run job
				print $log "  >> Submitting job for ichorCNA...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_ichor_cna_' . $sample,
					cmd	=> $ichor_command,
					modules	=> [$ichor_r],
					dependencies	=> join(':', $run_id, @{$normal_jobs{$patient}}, $pon_job_id),
					max_time	=> $parameters->{ichor_cna}->{time},
					mem		=> $parameters->{ichor_cna}->{mem},
					hpc_driver	=> $args{hpc_driver},
					extra_args	=> [$hpc_group]
					);

				$run_id = submit_job(
					jobname		=> 'run_ichor_cna_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @{$patient_jobs{$patient}}, $run_id;
				push @all_jobs, $run_id;
				} else {
				print $log "  >> Skipping ichorCNA step because this has already been completed!\n";
				}

			push @{$patient_jobs{$patient}}, @{$normal_jobs{$patient}};
			push @{$final_outputs{$patient}}, $final_file;
			}

		# should intermediate files be removed
		# run per patient
		if ($args{del_intermediates}) {

			if (scalar(@{$patient_jobs{$patient}}) == 0) {
				`rm -rf $tmp_directory`;
				} else {

				print $log ">> Submitting job to clean up temporary/intermediate files...\n";

				# make sure final output exists before removing intermediate files!
				my $cleanup_cmd = join("\n",
					"if [ -s " . join(" ] && [ -s ", @{$final_outputs{$patient}}) . " ]; then",
					"  $cleanup{$patient}",
					"else",
					'  echo "One or more FINAL OUTPUT FILES is missing; not removing intermediates"',
					"fi"
					);

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_cleanup_' . $patient,
					cmd	=> $cleanup_cmd,
					dependencies	=> join(':', @{$patient_jobs{$patient}}),
					mem		=> '256M',
					hpc_driver	=> $args{hpc_driver},
					kill_on_error	=> 0,
					extra_args	=> [$hpc_group]
					);

				$run_id = submit_job(
					jobname		=> 'run_cleanup_' . $patient,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);
				}
			}

		print $log "\nFINAL OUTPUT:\n" . join("\n  ", @{$final_outputs{$patient}}) . "\n";
		print $log "---\n";
		}

	# collate results
	if ($should_run_final) {

		my $collect_output = join(' ',
			"Rscript $cwd/collect_ichorCNA_output.R",
			'-d', $output_directory,
			'-p', $tool_data->{project_name}
			);

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'combine_ichorCNA_output',
			cmd	=> $collect_output,
			modules	=> [$r_version],
			dependencies	=> join(':', @all_jobs),
			mem		=> '4G',
			max_time	=> '12:00:00',
			hpc_driver	=> $args{hpc_driver},
			extra_args	=> [$hpc_group]
			);

		$run_id = submit_job(
			jobname		=> 'combine_ichorCNA_output',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @all_jobs, $run_id;
		}

	# if this is not a dry run OR there are jobs to assess (run or resumed with jobs submitted) then
	# collect job metrics (exit status, mem, run time)
	unless ( ($args{dry_run}) || (scalar(@all_jobs) == 0) ) {

		# collect job stats
		my $collect_metrics = collect_job_stats(
			job_ids		=> join(',', @all_jobs),
			outfile		=> $outfile,
			hpc_driver	=> $args{hpc_driver}
			);

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'output_job_metrics_' . $run_count,
			cmd	=> $collect_metrics,
			dependencies	=> join(':', @all_jobs),
			mem		=> '256M',
			hpc_driver	=> $args{hpc_driver},
			kill_on_error	=> 0,
			extra_args	=> [$hpc_group]
			);

		$run_id = submit_job(
			jobname		=> 'output_job_metrics',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @all_jobs, $run_id;

		# do some logging
		print "Number of jobs submitted: " . scalar(@all_jobs) . "\n";

		my $n_queued = `squeue -r | wc -l`;
		print "Total number of jobs in queue: " . $n_queued . "\n";

		# wait until it finishes
		unless ($args{no_wait}) {
			check_final_status(job_id => $run_id);
			}
		}

	# finish up
	print $log "\nProgramming terminated successfully.\n\n";
	close $log;
	}

### GETOPTS AND DEFAULT VALUES #####################################################################
# declare variables
my ($tool_config, $data_config, $output_directory);
my $hpc_driver = 'slurm';
my ($remove_junk, $dry_run, $help, $no_wait);

# get command line arguments
GetOptions(
	'h|help'	=> \$help,
	'd|data=s'	=> \$data_config,
	't|tool=s'	=> \$tool_config,
	'o|out_dir=s'	=> \$output_directory,
	'c|cluster=s'	=> \$hpc_driver,
	'remove'	=> \$remove_junk,
	'dry-run'	=> \$dry_run,
	'no-wait'	=> \$no_wait
	);

if ($help) {
	my $help_msg = join("\n",
		"Options:",
		"\t--help|-h\tPrint this help message",
		"\t--data|-d\t<string> data config (yaml format)",
		"\t--tool|-t\t<string> tool config (yaml format)",
		"\t--out_dir|-o\t<string> path to output directory",
		"\t--cluster|-c\t<string> cluster scheduler (default: slurm)",
		"\t--remove\t<boolean> should intermediates be removed? (default: false)",
		"\t--dry-run\t<boolean> should jobs be submitted? (default: false)",
		"\t--no-wait\t<boolean> should we exit after job submission (true) or wait until all jobs have completed (false)? (default: false)"
		);

	print "$help_msg\n";
	exit;
	}

# do some quick error checks to confirm valid arguments	
if (!defined($tool_config)) { die("No tool config file defined; please provide -t | --tool (ie, tool_config.yaml)"); }
if (!defined($data_config)) { die("No data config file defined; please provide -d | --data (ie, sample_config.yaml)"); }
if (!defined($output_directory)) { die("No output directory defined; please provide -o | --out_dir"); }

main(
	tool_config		=> $tool_config,
	data_config		=> $data_config,
	output_directory	=> $output_directory,
	hpc_driver		=> $hpc_driver,
	del_intermediates	=> $remove_junk,
	dry_run			=> $dry_run,
	no_wait			=> $no_wait
	);
